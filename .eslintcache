[{"D:\\workspace\\MEdit\\src\\index.tsx":"1","D:\\workspace\\MEdit\\src\\containers\\viewer\\index.tsx":"2","D:\\workspace\\MEdit\\src\\containers\\sider\\index.tsx":"3","D:\\workspace\\MEdit\\src\\containers\\editor\\index.tsx":"4","D:\\workspace\\MEdit\\src\\containers\\Viewer\\index.tsx":"5","D:\\workspace\\MEdit\\src\\containers\\Editor\\index.tsx":"6","D:\\workspace\\MEdit\\src\\App.tsx":"7","D:\\workspace\\MEdit\\src\\types\\index.d.ts":"8","D:\\workspace\\MEdit\\src\\utils\\markdown\\index.ts":"9","D:\\workspace\\MEdit\\src\\utils\\markdown\\simple-markdown.js":"10","D:\\workspace\\MEdit\\src\\component\\Inline\\Strong\\index.tsx":"11","D:\\workspace\\MEdit\\src\\component\\Inline\\InlineComponent.ts":"12","D:\\workspace\\MEdit\\src\\component\\Stable\\Indentation\\index.tsx":"13","D:\\workspace\\MEdit\\src\\component\\Block\\Paragraph\\index.tsx":"14","D:\\workspace\\MEdit\\src\\component\\EventBus.ts":"15","D:\\workspace\\MEdit\\src\\component\\DefaultComponent.ts":"16","D:\\workspace\\MEdit\\src\\component\\Inline\\Wbr\\index.ts":"17","D:\\workspace\\MEdit\\src\\component\\Block\\Header\\index.tsx":"18","D:\\workspace\\MEdit\\src\\component\\Block\\CodeBlock\\index.tsx":"19","D:\\workspace\\MEdit\\src\\component\\Block\\List\\index.tsx":"20","D:\\workspace\\MEdit\\src\\component\\Block\\Table\\index.tsx":"21","D:\\workspace\\MEdit\\src\\types\\ComponentTypes.ts":"22","D:\\workspace\\MEdit\\src\\component\\Inline\\Em\\index.ts":"23","D:\\workspace\\MEdit\\src\\component\\Inline\\Del\\index.ts":"24","D:\\workspace\\MEdit\\src\\component\\Inline\\Highlight\\index.ts":"25","D:\\workspace\\MEdit\\src\\component\\Inline\\PlainText\\index.ts":"26","D:\\workspace\\MEdit\\src\\component\\Block\\Paragraph\\EventManager.ts":"27","D:\\workspace\\MEdit\\src\\component\\Block\\EditableBlock.ts":"28","D:\\workspace\\MEdit\\src\\component\\Block\\dndWrapper.tsx":"29","D:\\workspace\\MEdit\\src\\containers\\header\\index.tsx":"30","D:\\workspace\\MEdit\\src\\containers\\header\\HeaderMenu.tsx":"31","D:\\workspace\\MEdit\\src\\utils\\editorTools\\FocusManager.ts":"32","D:\\workspace\\MEdit\\src\\utils\\editorTools\\getKey.ts":"33","D:\\workspace\\MEdit\\src\\utils\\editorTools\\dataToComponent.ts":"34","D:\\workspace\\MEdit\\src\\utils\\editorTools\\componentToData.ts":"35","D:\\workspace\\MEdit\\src\\utils\\notify\\index.ts":"36","D:\\workspace\\MEdit\\src\\utils\\api\\index.ts":"37","D:\\workspace\\MEdit\\src\\utils\\download\\index.ts":"38","D:\\workspace\\MEdit\\src\\component\\Block\\Quote\\index.tsx":"39"},{"size":233,"mtime":1619516457308,"results":"40","hashOfConfig":"41"},{"size":405,"mtime":1620351985543,"results":"42","hashOfConfig":"41"},{"size":1085,"mtime":1609512122896,"results":"43","hashOfConfig":"44"},{"size":1519,"mtime":1620787698620,"results":"45","hashOfConfig":"41"},{"size":344,"mtime":1616919600978,"results":"46","hashOfConfig":"47"},{"size":739,"mtime":1618381386029,"results":"48","hashOfConfig":"47"},{"size":202,"mtime":1619522553698,"results":"49","hashOfConfig":"41"},{"size":640,"mtime":1611043100764,"results":"50","hashOfConfig":"51"},{"size":4054,"mtime":1619516457313,"results":"52","hashOfConfig":"41"},{"size":72514,"mtime":1619516457315,"results":"53","hashOfConfig":"41"},{"size":885,"mtime":1619516457298,"results":"54","hashOfConfig":"41"},{"size":4976,"mtime":1620374688158,"results":"55","hashOfConfig":"41"},{"size":11392,"mtime":1621760514824,"results":"56","hashOfConfig":"41"},{"size":4030,"mtime":1621478328730,"results":"57","hashOfConfig":"41"},{"size":1849,"mtime":1619516457294,"results":"58","hashOfConfig":"41"},{"size":1530,"mtime":1620374648297,"results":"59","hashOfConfig":"41"},{"size":1653,"mtime":1619516457300,"results":"60","hashOfConfig":"41"},{"size":3807,"mtime":1621760718529,"results":"61","hashOfConfig":"41"},{"size":455,"mtime":1616656479027,"results":"62","hashOfConfig":"63"},{"size":5705,"mtime":1621759771295,"results":"64","hashOfConfig":"41"},{"size":498,"mtime":1616656666621,"results":"65","hashOfConfig":"63"},{"size":728,"mtime":1621482798700,"results":"66","hashOfConfig":"41"},{"size":925,"mtime":1619516457296,"results":"67","hashOfConfig":"41"},{"size":848,"mtime":1619516457295,"results":"68","hashOfConfig":"41"},{"size":891,"mtime":1619516457296,"results":"69","hashOfConfig":"41"},{"size":4863,"mtime":1621482213203,"results":"70","hashOfConfig":"41"},{"size":2713,"mtime":1619597291222,"results":"71","hashOfConfig":"41"},{"size":13139,"mtime":1621492115017,"results":"72","hashOfConfig":"41"},{"size":2793,"mtime":1620374623226,"results":"73","hashOfConfig":"41"},{"size":252,"mtime":1621580257221,"results":"74","hashOfConfig":"41"},{"size":5223,"mtime":1621953946668,"results":"75","hashOfConfig":"41"},{"size":1595,"mtime":1620374475829,"results":"76","hashOfConfig":"41"},{"size":149,"mtime":1620374475899,"results":"77","hashOfConfig":"41"},{"size":1534,"mtime":1620374475584,"results":"78","hashOfConfig":"41"},{"size":1255,"mtime":1620374475284,"results":"79","hashOfConfig":"41"},{"size":389,"mtime":1620544198839,"results":"80","hashOfConfig":"41"},{"size":841,"mtime":1620789632146,"results":"81","hashOfConfig":"41"},{"size":393,"mtime":1620787095102,"results":"82","hashOfConfig":"41"},{"size":3432,"mtime":1621760395694,"results":"83","hashOfConfig":"41"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"im1ysq",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},"1rl2yih",{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"suw9d",{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"98"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"14g46g5",{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"86"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"136"},"k1fhgd",{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"136"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"86"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"86"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"86"},"D:\\workspace\\MEdit\\src\\index.tsx",[],["190","191","192","193","194","195","196"],"D:\\workspace\\MEdit\\src\\containers\\viewer\\index.tsx",[],"D:\\workspace\\MEdit\\src\\containers\\sider\\index.tsx",["197"],"import React, { useState, createRef, useEffect } from 'react';\r\nimport { throttle } from 'lodash';\r\nimport './style.scss';\r\n\r\nexport interface SiderProps {\r\n\r\n}\r\n\r\nconst Sider: React.FC<SiderProps> = () => {\r\n  const [siderWidth, setSiderWidth] = useState(200);\r\n  const ref = createRef<HTMLDivElement>();\r\n  let isDragStart = false;\r\n  const handleDrag = throttle((e) => {\r\n    if (e.clientX === 0) return;\r\n    if (isDragStart) {\r\n      isDragStart = false;\r\n      return;\r\n    }\r\n    setSiderWidth(e.clientX);\r\n  }, 17);\r\n  useEffect(() => {\r\n    const border = ref.current;\r\n    if (border) {\r\n      border.addEventListener('drag', handleDrag);\r\n      border.addEventListener('dragstart', (e) => {\r\n        isDragStart = true;\r\n        e.dataTransfer && e.dataTransfer.setDragImage(new Image(), 0, 0);\r\n      }\r\n      );\r\n    }\r\n  }, []);\r\n  return (\r\n    <div className='sider-wrapper' style={{ 'flexBasis': siderWidth }}>\r\n      <div className='content'>sider</div>\r\n      <div className='sider-border' ref={ref} draggable='true' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sider;",["198","199","200","201","202","203","204","205"],"D:\\workspace\\MEdit\\src\\containers\\editor\\index.tsx",["206"],"import React, { useEffect, useRef } from 'react';\r\nimport './style.scss';\r\nimport Intendentation, { IndentationDataItem } from 'component/Stable/Indentation';\r\nimport FocusManager from 'utils/editorTools/FocusManager';\r\nimport { DragDropContext } from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\n\r\nexport interface EditorProps {\r\n\r\n}\r\nconst Editor: React.FC<EditorProps> = () => {\r\n  const editorRef = useRef<HTMLDivElement>(null);\r\n  const indentationRef = useRef<HTMLDivElement>(null);\r\n  const focusManager = new FocusManager({ rootRef: editorRef });\r\n  useEffect(() => {\r\n    focusManager.init();\r\n    const root = (indentationRef as any).current.decoratedRef.current;\r\n    (window as any).activeEditor = {\r\n      getMarkdown: () => {\r\n        return root.getMarkdown();\r\n      },\r\n      getDataList: () => {\r\n        return root.getDataList();\r\n      },\r\n      loadDataList: (dataList: IndentationDataItem[]) => {\r\n        root.setDataList(dataList);\r\n      }\r\n    };\r\n  }, []);\r\n  const mountValues = { childList: [], focusManager, handleInsertSiblings: () => { }, handleDestroy: () => { } };\r\n  const dndValues = { findIndex: (key: string) => { }, dndMove: (sourceKey: string, targetIndex: number) => { } };\r\n\r\n\r\n  return (\r\n    <div className='editor-wrapper' ref={editorRef}>\r\n      <Intendentation id='initIndentation' depth={0} ref={indentationRef as any} mountValues={mountValues} dndValues={dndValues} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DragDropContext(HTML5Backend)(Editor);","D:\\workspace\\MEdit\\src\\containers\\Viewer\\index.tsx",[],["207","208","209","210","211","212","213","214"],"D:\\workspace\\MEdit\\src\\containers\\Editor\\index.tsx",["215"],"import React, { useEffect, useRef } from 'react';\r\nimport './style.scss';\r\nimport Intendentation from 'component/Stable/Indentation';\r\nimport FocusManager from 'utils/FocusManager';\r\n\r\nexport interface EditorProps {\r\n\r\n}\r\nconst Editor: React.FC<EditorProps> = () => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const focusManager = new FocusManager({ rootRef: ref });\r\n  useEffect(() => {\r\n    focusManager.init();\r\n  }, []);\r\n  const stableValues = { childList: [], focusManager, handleInsertSiblings: () => { }, handleDestroy: () => { } };\r\n  return (\r\n    <div className='editor-wrapper' ref={ref}>\r\n      <Intendentation id='initIndentation' depth={0} stableValues={stableValues} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;","D:\\workspace\\MEdit\\src\\App.tsx",[],"D:\\workspace\\MEdit\\src\\types\\index.d.ts",["216","217","218","219"],"D:\\workspace\\MEdit\\src\\utils\\markdown\\index.ts",[],"D:\\workspace\\MEdit\\src\\utils\\markdown\\simple-markdown.js",[],["220","221","222","223","224","225","226"],"D:\\workspace\\MEdit\\src\\component\\Inline\\Strong\\index.tsx",["227","228"],"import { DefaultComponentProps } from 'component/DefaultComponent';\r\nimport { InlineStyleTypes } from 'types/ComponentTypes';\r\nimport InlineComponent from '../InlineComponent';\r\n\r\ninterface StrongProps extends DefaultComponentProps {\r\n\r\n}\r\n\r\nexport default class Strong extends InlineComponent {\r\n  public component: Element;\r\n\r\n  constructor(props: StrongProps | DefaultComponentProps) {\r\n    super(props);\r\n    this.component = document.createElement('strong');\r\n    this.refresh();\r\n  }\r\n\r\n  public getMarkdown() {\r\n    return `**${this.getContent()}**`;\r\n  }\r\n\r\n  public getContent() {\r\n    return this.childList.reduce((pre, cur) => {\r\n      return pre + (cur as InlineComponent).getContent();\r\n    }, '');\r\n  }\r\n\r\n  private refresh() {\r\n    this.component.innerHTML = '';\r\n    this.childList.forEach(child => {\r\n      this.component.appendChild(child.component);\r\n    });\r\n  }\r\n}","D:\\workspace\\MEdit\\src\\component\\Inline\\InlineComponent.ts",["229","230","231","232","233","234","235","236"],"import EventBus, { BusEventTypes } from 'component/EventBus';\r\nimport DefaultComponent, { DefaultComponentProps } from 'component/DefaultComponent';\r\nimport { BlockStyleTypes, DefaultDataItem, InlineStyleTypes } from 'types/ComponentTypes';\r\nimport { componentsToDataList } from 'utils/editorTools/componentToData';\r\nimport './style.scss';\r\n\r\nexport interface InlineMountProps {\r\n  eventBus: EventBus;\r\n  handleEnter: (key: string, cur?: DefaultDataItem, next?: DefaultDataItem) => void;\r\n  handleDestroy: (key: string) => void;\r\n  handleInsertSibling: (key: string, components: DefaultComponent[], replace: boolean) => void;\r\n}\r\nexport default abstract class InlineComponent extends DefaultComponent {\r\n  public inlineMountProps?: InlineMountProps;\r\n\r\n  constructor(props: DefaultComponentProps) {\r\n    super(props);\r\n  }\r\n\r\n  onChildInsertSibling(key: string, siblings: DefaultComponent[], replace: boolean) {\r\n    if (!this.mounted) throw new Error('unmounted component cannot use this function');\r\n    const index = this.findChildIndex(key);\r\n    let temp = index;\r\n    siblings.forEach(sibling => {\r\n      (this.component.childNodes[temp] as Element).insertAdjacentElement('afterend', sibling.component);\r\n      this.mountChild(sibling as InlineComponent);\r\n      temp += 1;\r\n    });\r\n    if (replace) {\r\n      console.log('replace child: ', this.childList[index].key);\r\n      this.inlineMountProps?.eventBus.remove(this.childList[index].key);\r\n      this.childList.splice(index, 1, ...siblings);\r\n      this.component.removeChild(this.component.childNodes[index]);\r\n    } else {\r\n      this.childList.splice(index + 1, 0, ...siblings);\r\n    }\r\n  }\r\n\r\n  onChildEnter(key: string, _cur?: DefaultDataItem, _next?: DefaultDataItem) {\r\n    if (!this.mounted) throw new Error('unmounted component cannot use this function');\r\n    const index = this.findChildIndex(key);\r\n    const curDataList = componentsToDataList(this.childList.slice(0, index) as InlineComponent[]);\r\n    const nextDataList = componentsToDataList(this.childList.slice(index + 1) as InlineComponent[]);\r\n    (_cur?.childList.length || _cur?.content?.length) && curDataList.push(_cur);\r\n    (_next?.childList.length || _next?.content?.length) && nextDataList.unshift(_next);\r\n    const cur = curDataList.length ? { type: this.type, childList: curDataList } : undefined;\r\n    const next = nextDataList.length ? { type: this.type, childList: nextDataList } : undefined;\r\n    this.inlineMountProps!.handleEnter(this.key, cur, next);\r\n  }\r\n\r\n  onChildDestroy(key: string) {\r\n    console.log('destroy:', key);\r\n    const index = this.findChildIndex(key);\r\n    if (document.contains(this.childList[index].component))\r\n      this.component.removeChild(this.component.childNodes[index]);\r\n    this.childList.splice(index, 1);\r\n    if (!this.childList.length) {\r\n      this.destroy();\r\n    }\r\n  }\r\n\r\n  public mountChild(child: InlineComponent) {\r\n    if (!this.mounted) throw new Error('unmounted component cannot use this function');\r\n    const that = this;\r\n    child.mount({\r\n      eventBus: this.inlineMountProps!.eventBus,\r\n      handleEnter: this.onChildEnter.bind(that),\r\n      handleDestroy: this.onChildDestroy.bind(that),\r\n      handleInsertSibling: this.onChildInsertSibling.bind(that)\r\n    });\r\n  }\r\n\r\n  public mount(props: InlineMountProps) {\r\n    if (this.mounted) return;\r\n    this.mounted = true;\r\n    this.inlineMountProps = props;\r\n    const that = this;\r\n    this.inlineMountProps.eventBus.subscribe(BusEventTypes.showMarkdown, this.key, (values: { show: boolean }) => {\r\n      const { show } = values;\r\n      if (this.component.getAttribute('class') && (!!this.component.getAttribute('class')!.match(/mark/) === show)) return;\r\n      this.component.setAttribute('class', `${this.type}-${show ? 'mark' : ''}`);\r\n    });\r\n    this.childList.forEach(child => {\r\n      const { eventBus } = props;\r\n      (child as InlineComponent).mount({\r\n        eventBus,\r\n        handleEnter: this.onChildEnter.bind(that),\r\n        handleDestroy: this.onChildDestroy.bind(that),\r\n        handleInsertSibling: this.onChildInsertSibling.bind(that)\r\n      });\r\n    });\r\n  }\r\n\r\n  public unmount() {\r\n    this.inlineMountProps = undefined;\r\n    this.mounted = false;\r\n  }\r\n\r\n  public destroyChild(key: string) {\r\n    console.log('remove: ', key);\r\n    const index = this.findChildIndex(key);\r\n    this.childList.splice(index, 1);\r\n    this.inlineMountProps?.eventBus.remove(key);\r\n    const childNode = this.component.childNodes[index];\r\n    if (childNode && this.component.contains(childNode))\r\n      this.component.removeChild(this.component.childNodes[index]);\r\n  }\r\n\r\n  // mount but not contains\r\n  public destroy() {\r\n    if (!this.mounted) throw new Error('unmounted component cannot use this function');\r\n    this.childList.forEach(child => child.destroy());\r\n    this.inlineMountProps!.eventBus.remove(this.key);\r\n    this.inlineMountProps!.handleDestroy(this.key);\r\n  }\r\n\r\n  abstract getContent(): string;\r\n}\r\n","D:\\workspace\\MEdit\\src\\component\\Stable\\Indentation\\index.tsx",["237","238","239","240","241"],"import * as React from 'react';\r\nimport List from 'component/Block/List';\r\nimport Paragraph from 'component/Block/Paragraph';\r\nimport DefaultComponent from 'component/DefaultComponent';\r\nimport { DropTarget } from 'react-dnd';\r\nimport { BlockStyleTypes, DefaultDataItem, InlineStyleTypes } from 'types/ComponentTypes';\r\nimport FocusManager from 'utils/editorTools/FocusManager';\r\nimport getKey from 'utils/editorTools/getKey';\r\nimport './style.scss';\r\nimport { defaultBlockProps } from 'component/Block/types';\r\nimport Header from 'component/Block/Header';\r\nimport Quote from 'component/Block/Quote';\r\n\r\nexport interface IndentationProps extends defaultBlockProps {\r\n  depth: number;\r\n  [propName: string]: any;\r\n}\r\n\r\nexport interface IndentationDataItem extends DefaultDataItem {\r\n  key: string;\r\n  ref?: React.RefObject<any>;\r\n}\r\n\r\ninterface IndentationState {\r\n  dataList: IndentationDataItem[],\r\n  refresh: boolean\r\n}\r\n\r\nclass Indentation extends React.Component<IndentationProps, IndentationState> {\r\n  public type = BlockStyleTypes.indentation;\r\n\r\n  depth: number;\r\n\r\n  handleInsertSibling: (key: string, siblings: DefaultDataItem[], replace: boolean) => void;\r\n\r\n  key: string;\r\n\r\n  handleDestroy: (key: string) => void;\r\n\r\n  focusManager: any;\r\n\r\n  constructor(props: IndentationProps) {\r\n    super(props);\r\n    const { depth, id, mountValues } = props;\r\n    const { childList, handleInsertSiblings, handleDestroy, focusManager } = mountValues;\r\n    this.key = id;\r\n    this.focusManager = focusManager;\r\n    this.state = {\r\n      dataList: childList.map(child => ({\r\n        key: child.key || getKey(child.type),\r\n        type: child.type,\r\n        childList: child.childList\r\n      })),\r\n      refresh: true\r\n    };\r\n    this.depth = depth;\r\n    this.handleInsertSibling = handleInsertSiblings;\r\n    this.handleDestroy = handleDestroy;\r\n    this.findChildIndex = this.findChildIndex.bind(this);\r\n    this.dndMove = this.dndMove.bind(this);\r\n    this.getDataList = this.getDataList.bind(this);\r\n    this.setDataList = this.setDataList.bind(this);\r\n    this.getDataItem = this.getDataItem.bind(this);\r\n    this.onChildInsertSibling = this.onChildInsertSibling.bind(this);\r\n    this.onChildDestroy = this.onChildDestroy.bind(this);\r\n    this.onChildTab = this.onChildTab.bind(this);\r\n    this.InsertChildren = this.InsertChildren.bind(this);\r\n    this.findChildIndex = this.findChildIndex.bind(this);\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps: IndentationProps, state: IndentationState) {\r\n    if (state.refresh) {\r\n      return { refresh: false };\r\n    }\r\n    const curDataList = state.dataList.length ? state.dataList :\r\n      [{ key: getKey(BlockStyleTypes.paragragh), type: BlockStyleTypes.paragragh, childList: [] }];\r\n    const nextDataList = nextProps.mountValues.childList;\r\n    if (!nextDataList.length) return { dataList: curDataList };\r\n    const func = (cur: DefaultDataItem[], next: DefaultDataItem[]): boolean => {\r\n      if (cur.length !== next.length) return false;\r\n      return cur.every((item, index) => {\r\n        if (item.type === next[index]?.type) {\r\n          if (item.type === InlineStyleTypes.plainText) {\r\n            return item.content === next[index]?.content;\r\n          }\r\n          return item.childList.every((_item, _index) => {\r\n            return _item.type === next[index]?.childList[_index]?.type && func(_item.childList, next[index]?.childList[_index]?.childList);\r\n          });\r\n        }\r\n        return false;\r\n      });\r\n    };\r\n    if (!func(curDataList, nextDataList)) {\r\n      return { dataList: nextDataList as IndentationDataItem[] };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private onChildInsertSibling(key: string, childList: DefaultDataItem[] = [], replace: boolean) {\r\n    const index = this.findChildIndex(key);\r\n    // eslint-disable-next-line\r\n    const prevDataList = this.state.dataList.slice();\r\n    prevDataList.splice(replace ? index : index + 1, replace ? 1 : 0, ...childList.map(child => ({\r\n      ...child,\r\n      key: child.key || getKey(child.type)\r\n    })));\r\n    this.setState({ dataList: prevDataList, refresh: true });\r\n  }\r\n\r\n  private onChildTab(key: string, isInside: boolean) {\r\n    const dataList = this.getDataList();\r\n    const index = this.findChildIndex(key);\r\n    // 向内缩进\r\n    if (isInside) {\r\n      // 与前一个合并\r\n      if (dataList[index - 1]?.type === BlockStyleTypes.indentation) {\r\n        dataList[index - 1].childList.push(dataList[index]);\r\n        // 与后一个合并\r\n        if (dataList[index + 1]?.type === BlockStyleTypes.indentation) {\r\n          dataList[index + 1].childList.forEach(child => {\r\n            dataList[index - 1].childList.push(child);\r\n          });\r\n          dataList.splice(index + 1, 1);\r\n        }\r\n        dataList.splice(index, 1);\r\n      }\r\n\r\n      else {\r\n        dataList.splice(index, 1, {\r\n          key: getKey(BlockStyleTypes.indentation),\r\n          type: BlockStyleTypes.indentation,\r\n          childList: [dataList[index]]\r\n        });\r\n\r\n        // 只与后一个合并\r\n        if (dataList[index + 1]?.type === BlockStyleTypes.indentation) {\r\n          dataList[index + 1].childList.forEach(child => {\r\n            dataList[index].childList.push(child);\r\n          });\r\n          dataList.splice(index + 1, 1);\r\n        }\r\n        // 都不合并\r\n      }\r\n      this.setState({ dataList, refresh: true });\r\n    }\r\n    // 向外缩进\r\n    else {\r\n      let siblings: DefaultDataItem[];\r\n      // index之后的另起一个indentation\r\n      if (dataList.length > index + 1) {\r\n        const newDataList = dataList.slice(index + 1);\r\n        siblings = [dataList[index], { type: BlockStyleTypes.indentation, childList: newDataList }];\r\n      } else {\r\n        siblings = [dataList[index]];\r\n      }\r\n      // index前面的更新内容\r\n      if (index > 0) {\r\n        this.handleInsertSibling(this.key, siblings, false);\r\n        this.setState({ dataList: dataList.slice(0, index), refresh: true });\r\n      }\r\n      // index为头部则整体替换\r\n      else {\r\n        this.handleInsertSibling(this.key, siblings, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  private onChildDestroy(key: string) {\r\n    const index = this.findChildIndex(key);\r\n    const dataList = this.getDataList();\r\n    // 若多个子组件\r\n    if (dataList.length > 1) {\r\n      dataList.splice(index, 1);\r\n      this.setState({ dataList, refresh: true });\r\n    }\r\n    // 单个子组件， 准备删除该indentation\r\n    // 若是根indentation\r\n    else if (this.depth === 0) {\r\n      this.setState({ dataList: [{ key: getKey(BlockStyleTypes.paragragh), type: BlockStyleTypes.paragragh, childList: [] }], refresh: true });\r\n    } else {\r\n      this.destroy();\r\n    }\r\n  }\r\n\r\n  private getChildChildList(index: number) {\r\n    const child = this.state.dataList[index];\r\n    if (child.type === BlockStyleTypes.indentation) {\r\n      return (child.ref!.current.decoratedRef.current as Indentation).getDataList();\r\n    }\r\n    return child.ref?.current.decoratedRef.current.decoratedRef.current.decoratedRef.current.getDataList();\r\n  }\r\n\r\n  private getDataItem(key: string) {\r\n    const index = this.state.dataList.findIndex((item => item.key === key));\r\n    const data = this.state.dataList.slice(index, index + 1)[0];\r\n    data.childList = this.getChildChildList(index);\r\n    return data;\r\n  }\r\n\r\n  public getDataList() {\r\n    const dataList = this.state.dataList.slice();\r\n    dataList.forEach((data, index) => {\r\n      try {\r\n        // TODO 解决一下这里\r\n        // eslint-disable-next-line\r\n        data.childList = this.getChildChildList(index);\r\n      } catch (e) {\r\n        debugger;\r\n      }\r\n    });\r\n    return dataList;\r\n  }\r\n\r\n  public setDataList(dataList: IndentationDataItem[]) {\r\n    this.setState({ dataList });\r\n  }\r\n\r\n  public getMarkdown(): string {\r\n    return this.state.dataList.map(child => {\r\n      if (child.type === BlockStyleTypes.indentation) {\r\n        return (child.ref!.current.decoratedRef.current as Indentation).getMarkdown();\r\n      }\r\n      console.log(child.type);\r\n      return child.ref!.current.decoratedRef.current.decoratedRef.current.decoratedRef.current.getMarkdown();\r\n    }).join('\\n');\r\n  }\r\n\r\n  public InsertChildren(children: DefaultComponent[], offset: number = 0) {\r\n    const prevDataList = this.state.dataList.slice();\r\n    if (offset === -1) {\r\n      prevDataList.splice(prevDataList.length, 0, ...children);\r\n    } else {\r\n      prevDataList.splice(offset, 0, ...children);\r\n    }\r\n    this.setState({ dataList: prevDataList, refresh: true });\r\n  }\r\n\r\n  private findChildIndex(key: string) {\r\n    const index = this.state.dataList.findIndex(data => data.key === key);\r\n    if (index < 0) throw new Error(`cannot find the child that the key is ${key}`);\r\n    return index;\r\n  }\r\n\r\n  public destroy() {\r\n    this.handleDestroy(this.key);\r\n  }\r\n\r\n  private dndMove(key: string, toIndex: number) {\r\n    const dataList = this.getDataList();\r\n    dataList.splice(toIndex + 1, 0, dataList[this.findChildIndex(key)]);\r\n    dataList.splice(this.findChildIndex(key), 1);\r\n    console.log(dataList);\r\n    this.setState({ dataList, refresh: true });\r\n  }\r\n\r\n  render() {\r\n    const { connectDropTarget } = this.props;\r\n    console.log(this.state.dataList);\r\n    return connectDropTarget(\r\n      <div className='indentation'>{\r\n        this.state.dataList\r\n          .map(data => {\r\n            if (!data.ref)\r\n              // eslint-disable-next-line\r\n              data.ref = React.createRef();\r\n            const mountValues = {\r\n              childList: data.childList,\r\n              focusManager: this.focusManager,\r\n              handleInsertSiblings: this.onChildInsertSibling,\r\n              handleTab: this.onChildTab,\r\n              handleDestroy: this.onChildDestroy,\r\n            };\r\n            const dndValues = {\r\n              indentationKey: this.key,\r\n              getDataItem: this.getDataItem,\r\n              findIndex: this.findChildIndex,\r\n              dndMove: this.dndMove\r\n            };\r\n\r\n            switch (data.type) {\r\n              case BlockStyleTypes.paragragh:\r\n                return <Paragraph ref={data.ref} key={data.key} id={data.key} mountValues={mountValues} dndValues={dndValues} />;\r\n              case BlockStyleTypes.indentation:\r\n                return <DndIndentation ref={data.ref} key={data.key} id={data.key} depth={this.depth + 1} mountValues={mountValues} dndValues={dndValues} />;\r\n              case BlockStyleTypes.list: {\r\n                const listData = data.listData?.length ? data.listData : data.childList;\r\n                return <List ref={data.ref} key={data.key} id={data.key} listData={listData as any} mountValues={mountValues} dndValues={dndValues} />;\r\n              }\r\n              case BlockStyleTypes.header:\r\n                return <Header ref={data.ref} key={data.key} id={data.key} level={data.headerLevel || 1} mountValues={mountValues} dndValues={dndValues} />;\r\n              case BlockStyleTypes.quote:\r\n                return <Quote ref={data.ref} key={data.key} id={data.key} mountValues={mountValues} dndValues={dndValues} />;\r\n              default:\r\n                throw new Error('unexpected case');\r\n            }\r\n          })\r\n      }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst DndIndentation = DropTarget('drag', {}, connect => ({\r\n  connectDropTarget: connect.dropTarget()\r\n}))(Indentation);\r\n\r\nexport default DndIndentation;","D:\\workspace\\MEdit\\src\\component\\Block\\Paragraph\\index.tsx",["242","243"],"import React, { RefObject } from 'react';\r\nimport DefaultComponent, { DefaultComponentProps } from 'component/DefaultComponent';\r\nimport PlainText from 'component/Inline/PlainText';\r\nimport { BlockStyleTypes, DefaultDataItem, InlineStyleTypes } from 'types/ComponentTypes';\r\nimport { dataListToComponents } from 'utils/editorTools/dataToComponent';\r\nimport EditableBlock from '../EditableBlock';\r\nimport dndWrapper from '../dndWrapper';\r\nimport './style.scss';\r\nimport { defaultBlockProps } from '../types';\r\n\r\nexport class ParagraphComponent extends EditableBlock {\r\n  constructor(props: DefaultComponentProps) {\r\n    super({ ...props, component: document.createElement('p') });\r\n  }\r\n\r\n  public refresh() {\r\n    this.component.innerHTML = '';\r\n    this.childList.forEach(child => {\r\n      this.component.appendChild(child.component);\r\n    });\r\n  }\r\n\r\n  public clone(childList: DefaultComponent[] = []) {\r\n    if (!this.mounted) throw new Error('unmounted component cannot use this function');\r\n    const result = new ParagraphComponent({ type: BlockStyleTypes.paragragh, childList });\r\n    result.mount({\r\n      handleInsertSiblings: this.blockMountProps!.handleInsertSiblings,\r\n      handleEnter: this.blockMountProps!.handleEnter,\r\n      handleTab: this.blockMountProps!.handleTab,\r\n      handleDestroy: this.blockMountProps!.handleDestroy\r\n    });\r\n    return result;\r\n  }\r\n\r\n  static createDefault = () => {\r\n    const plainText = new PlainText({ type: InlineStyleTypes.plainText, content: '' });\r\n    const paragragh = new ParagraphComponent({ type: BlockStyleTypes.paragragh });\r\n    paragragh.appendChild(plainText);\r\n    return paragragh;\r\n  };\r\n\r\n}\r\n\r\n\r\nexport interface ParagraphProps extends defaultBlockProps {\r\n  [propName: string]: any;\r\n}\r\n\r\nclass Paragraph extends React.Component<ParagraphProps> {\r\n  target: ParagraphComponent;\r\n\r\n  ref: RefObject<HTMLDivElement>;\r\n\r\n  key: string;\r\n\r\n  constructor(props: ParagraphProps) {\r\n    super(props);\r\n    this.ref = React.createRef();\r\n    const { id, mountValues } = props;\r\n    const { childList, handleTab, handleInsertSiblings, handleDestroy, focusManager } = mountValues;\r\n    this.key = id;\r\n    const onParagraphInsertSibling = (sibling: DefaultDataItem, replace: boolean) => {\r\n      handleInsertSiblings(this.key, [sibling], replace);\r\n    };\r\n\r\n    const onEnter = (key: string, nextChildren: DefaultDataItem[]) => {\r\n      handleInsertSiblings(this.key, [{ type: BlockStyleTypes.paragragh, childList: nextChildren }], false);\r\n    };\r\n\r\n    const onTab = (key: string, isInside: boolean) => {\r\n      handleTab(this.key, isInside);\r\n    };\r\n\r\n    const onDestroy = () => {\r\n      console.log('destroy!!!!!!!!!!!!!!!!!!!!!');\r\n      handleDestroy(this.key);\r\n    };\r\n\r\n    this.target = new ParagraphComponent({\r\n      type: BlockStyleTypes.paragragh, childList: dataListToComponents(childList)\r\n    });\r\n    this.target.mount({ handleInsertSiblings: onParagraphInsertSibling, handleEnter: onEnter, handleTab: onTab, handleDestroy: onDestroy });\r\n    focusManager.register(this.key, this.target.detectAnchor);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refresh();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.refresh();\r\n  }\r\n\r\n  public getDataList() {\r\n    return this.target.getDataList();\r\n  }\r\n\r\n  public getMarkdown() {\r\n    return this.target.getMarkdown();\r\n  }\r\n\r\n  private refresh() {\r\n    this.ref.current!.appendChild(this.target.component);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      // 这些 props 由 React DnD注入，参考`collect`函数定义\r\n      isDragging, connectDragSource, connectDragPreview, connectDropTarget\r\n    } = this.props;\r\n    return connectDropTarget(\r\n      connectDragPreview(\r\n        <div className='blockWrapper'>\r\n          {connectDragSource(<div className='dragIcon'>::</div>)}\r\n          <div className='paragraph' style={{ opacity: isDragging ? 0.5 : 1 }} ref={this.ref} dangerouslySetInnerHTML={{ __html: '' }} />\r\n        </div>\r\n\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default dndWrapper<ParagraphProps>(Paragraph);","D:\\workspace\\MEdit\\src\\component\\EventBus.ts",["244","245","246","247","248","249","250","251","252","253"],"export enum BusEventTypes {\r\n  refresh = 'refresh',\r\n  recordAnchor = 'recordAnchor',\r\n  parseAnchor = 'parseAnchor',\r\n  showMarkdown = 'showMarkdown',\r\n  selectState = 'selectState',\r\n  findEnterAnchor = 'findEnterAnchor',\r\n  deleteEmpty = 'deleteEmpty',\r\n  insertSibling = 'insertSibling'\r\n}\r\n\r\nexport type TaskList = Array<{\r\n  type: BusEventTypes,\r\n  listeners: { key: string, func: Function }[]\r\n}>;\r\n\r\nexport default class EventBus {\r\n  taskList: TaskList;\r\n\r\n  constructor() {\r\n    this.taskList = [];\r\n  }\r\n\r\n  dispatch(type: BusEventTypes, values?: { [propName: string]: any }, once: boolean = false, inCase?: () => void) {\r\n    const task = this.taskList.find(item => item.type === type);\r\n    if (!task) {\r\n      inCase && inCase();\r\n      console.error('no task exist in type: ', type);\r\n      return;\r\n    }\r\n    // task.listeners.forEach(listener => listener.func(values));\r\n    for (let i = 0; i < task.listeners.length; i++) {\r\n      const result = task.listeners[i].func(values);\r\n      if (once && result) break;\r\n    }\r\n  }\r\n\r\n  subscribe(type: BusEventTypes, key: string, func: Function) {\r\n    const task = this.taskList.find(item => item.type === type);\r\n    if (task) {\r\n      if (task.listeners.find(item => item.key === key))\r\n        console.error('repeat listener: ', key, type);\r\n      task.listeners.push({ key, func });\r\n    } else {\r\n      this.taskList.push({ type, listeners: [{ key, func }] });\r\n    }\r\n  }\r\n\r\n  remove(key: string) {\r\n    this.taskList.forEach(task => {\r\n      const index = task.listeners.findIndex(item => item.key === key);\r\n      if (index < 0) return;\r\n      task.listeners.splice(index, 1);\r\n    });\r\n  }\r\n\r\n  clean() {\r\n    this.taskList = [];\r\n  }\r\n\r\n  getKeysOnType(type: BusEventTypes) {\r\n    return this.taskList.find(task => task.type === type)?.listeners.map(item => item.key);\r\n  }\r\n}","D:\\workspace\\MEdit\\src\\component\\DefaultComponent.ts",[],"D:\\workspace\\MEdit\\src\\component\\Inline\\Wbr\\index.ts",[],"D:\\workspace\\MEdit\\src\\component\\Block\\Header\\index.tsx",["254","255","256","257","258","259","260","261"],"import * as React from 'react';\r\nimport { RefObject } from 'react';\r\nimport DefaultComponent, { DefaultComponentProps } from 'component/DefaultComponent';\r\nimport PlainText from 'component/Inline/PlainText';\r\nimport { BlockStyleTypes, DefaultDataItem, InlineStyleTypes } from 'types/ComponentTypes';\r\nimport { dataListToComponents } from 'utils/editorTools/dataToComponent';\r\nimport dndWrapper from '../dndWrapper';\r\nimport EditableBlock from '../EditableBlock';\r\nimport { defaultBlockProps } from '../types';\r\nimport './style.scss';\r\n\r\nexport class HeaderComponent extends EditableBlock {\r\n\r\n  content: string;\r\n\r\n  constructor(props: DefaultComponentProps & { level: number, content: string }) {\r\n    super({ ...props, component: document.createElement(`h${props.level}`) });\r\n    // this.refresh();\r\n    this.content = props.content;\r\n    this.doMarkdownParse = false;\r\n  }\r\n\r\n  public refresh() {\r\n    this.component.innerHTML = this.content || '';\r\n  }\r\n\r\n  public clone(childList: DefaultComponent[] = []) {\r\n    throw new Error('unmounted component cannot use this function');\r\n  }\r\n\r\n  static createDefault = () => {\r\n    throw new Error('unmounted component cannot use this function');\r\n  };\r\n\r\n}\r\n\r\nexport interface HeaderProps extends defaultBlockProps {\r\n  content?: string;\r\n  level: number;\r\n  [propName: string]: any;\r\n}\r\n\r\nclass Header extends React.Component<HeaderProps> {\r\n  public key: string;\r\n\r\n  ref: RefObject<HTMLDivElement>;\r\n\r\n  content: string;\r\n\r\n  target: HeaderComponent;\r\n\r\n  constructor(props: HeaderProps) {\r\n    super(props);\r\n    const { id, content = '', level, mountValues } = props;\r\n    this.key = id;\r\n    this.content = content;\r\n    this.ref = React.createRef();\r\n    const { childList, handleTab, handleInsertSiblings, handleDestroy, focusManager } = mountValues;\r\n    const onHeaderInsertSibling = (sibling: DefaultDataItem, replace: boolean) => {\r\n      handleInsertSiblings(this.key, [sibling], replace);\r\n    };\r\n\r\n    const onEnter = (key: string, nextChildren: DefaultDataItem[]) => {\r\n      handleInsertSiblings(this.key, [{ type: BlockStyleTypes.paragragh, childList: nextChildren }], false);\r\n    };\r\n\r\n    const onTab = (key: string, isInside: boolean) => {\r\n      handleTab(this.key, isInside);\r\n    };\r\n\r\n    const onDestroy = () => {\r\n      console.log('destroy!!!!!!!!!!!!!!!!!!!!!');\r\n      handleDestroy(this.key);\r\n    };\r\n    this.target = new HeaderComponent({ type: BlockStyleTypes.header, childList: [], level, content });\r\n    this.target.mount({ handleInsertSiblings: onHeaderInsertSibling, handleEnter: onEnter, handleTab: onTab, handleDestroy: onDestroy });\r\n    focusManager.register(this.key, this.target.detectAnchor);\r\n    this.refresh = this.refresh.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refresh();\r\n  }\r\n\r\n  public getContent() {\r\n    return this.ref.current!.innerHTML;\r\n  }\r\n\r\n  public getDataList() {\r\n    return [{ type: InlineStyleTypes.plainText, childList: [], content: this.getContent() }];\r\n  }\r\n\r\n  public getMarkdown() {\r\n    const arr = new Array(this.props.level).fill(1);\r\n    return `${arr.reduce((pre, cur) => `${pre}#`, '')} ${this.target.getMarkdown()}`;\r\n  }\r\n\r\n  // content -> DOM\r\n  private refresh() {\r\n    (this.ref.current as any).appendChild(this.target.component);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isDragging, connectDragSource, connectDragPreview, connectDropTarget\r\n    } = this.props;\r\n    return connectDropTarget(\r\n      connectDragPreview(\r\n        <div className='blockWrapper'>\r\n          {connectDragSource(<div className='dragIcon'>::</div>)}\r\n          <div className='header' ref={this.ref} style={{ opacity: isDragging ? 0.5 : 1 }} dangerouslySetInnerHTML={{ __html: '' }} />\r\n        </div>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default dndWrapper<HeaderProps>(Header);\r\n","D:\\workspace\\MEdit\\src\\component\\Block\\CodeBlock\\index.tsx",["262"],"import * as React from 'react';\r\n\r\nexport interface CodeBlockProps {\r\n  content?: string;\r\n  handleInsertParagraph: (key: string) => void;\r\n}\r\n\r\nexport interface CodeBlockState {\r\n\r\n}\r\n\r\nclass CodeBlock extends React.Component<CodeBlockProps, CodeBlockState> {\r\n  constructor(props: CodeBlockProps) {\r\n    super(props);\r\n    console.log('here');\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>codeBlock</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CodeBlock;",["263","264","265","266","267","268","269","270"],"D:\\workspace\\MEdit\\src\\component\\Block\\List\\index.tsx",["271","272","273","274"],"import DefaultComponent, { DefaultComponentProps } from 'component/DefaultComponent';\r\nimport PlainText from 'component/Inline/PlainText';\r\nimport * as React from 'react';\r\nimport { RefObject } from 'react';\r\nimport { BlockStyleTypes, DefaultDataItem, InlineStyleTypes } from 'types/ComponentTypes';\r\nimport { dataListToComponents } from 'utils/editorTools/dataToComponent';\r\nimport dndWrapper from '../dndWrapper';\r\nimport EditableBlock from '../EditableBlock';\r\nimport { defaultBlockProps } from '../types';\r\nimport './style.scss';\r\n\r\nexport class LiComponent extends EditableBlock {\r\n  constructor(props: DefaultComponentProps) {\r\n    super({ ...props, component: document.createElement('p') });\r\n    this.refresh();\r\n  }\r\n\r\n  public refresh() {\r\n    this.component.innerHTML = '';\r\n    this.childList.forEach(child => {\r\n      this.component.appendChild(child.component);\r\n    });\r\n  }\r\n\r\n  public clone(childList: DefaultComponent[] = []) {\r\n    throw new Error('unmounted component cannot use this function');\r\n    const result = new LiComponent({ type: BlockStyleTypes.li, childList });\r\n    result.mount({\r\n      handleInsertSiblings: this.blockMountProps!.handleInsertSiblings,\r\n      handleEnter: this.blockMountProps!.handleEnter,\r\n      handleTab: this.blockMountProps!.handleTab,\r\n      handleDestroy: this.blockMountProps!.handleDestroy\r\n    });\r\n    return result;\r\n  }\r\n\r\n  static createDefault = () => {\r\n    const plainText = new PlainText({ type: InlineStyleTypes.plainText, content: '' });\r\n    const li = new LiComponent({ type: BlockStyleTypes.li });\r\n    li.appendChild(plainText);\r\n    return li;\r\n  };\r\n\r\n}\r\n\r\nexport interface ListProps extends defaultBlockProps {\r\n  listData?: Array<DefaultDataItem[]>;\r\n  [propName: string]: any;\r\n}\r\n\r\nclass List extends React.Component<ListProps> {\r\n  public key: string;\r\n\r\n  ref: RefObject<HTMLUListElement> | RefObject<HTMLOListElement>;\r\n\r\n  listData: Array<DefaultDataItem[]>;\r\n\r\n  childList: LiComponent[];\r\n\r\n  constructor(props: ListProps) {\r\n    super(props);\r\n    console.log(props);\r\n    const { id, listData } = props;\r\n    this.key = id;\r\n    this.ref = React.createRef();\r\n    this.listData = listData || [];\r\n    this.childList = [];\r\n    this.constructChildList = this.constructChildList.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.listData, this.childList);\r\n    this.constructChildList();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n  }\r\n\r\n\r\n  public getDataList() {\r\n    return this.childList.map(child => {\r\n      return child.getDataList();\r\n    });\r\n  }\r\n\r\n  // DOM -> listData\r\n  private getListData() {\r\n    this.listData = this.childList.map(child => {\r\n      return child.getDataList();\r\n    });\r\n    return this.listData;\r\n  }\r\n\r\n  public getMarkdown() {\r\n    return this.childList.map(child => {\r\n      return `- ${child.getMarkdown()}`;\r\n    }).join('\\n');\r\n  }\r\n\r\n  findChildIndex(key: string): number {\r\n    if (!this.childList.length)\r\n      throw new Error('this component has no child, but use findChildIndex');\r\n    const index = this.childList.findIndex(item => item.key === key);\r\n    if (index < 0) throw new Error(`there is no child which key is ${key}`);\r\n    return index;\r\n  }\r\n\r\n  // listData -> childList -> DOM\r\n  private constructChildList() {\r\n    this.listData = this.listData.length ? this.listData : [[{ type: InlineStyleTypes.plainText, content: '', childList: [] }]];\r\n    const { mountValues } = this.props;\r\n    const { focusManager, handleTab, handleInsertSiblings, handleDestroy } = mountValues;\r\n\r\n    const onChildAddListItem = (key: string, data: DefaultDataItem[]) => {\r\n      const index = this.findChildIndex(key);\r\n      this.getListData();\r\n      this.listData.splice(index + 1, 0, data);\r\n      this.constructChildList();\r\n    };\r\n\r\n    const onEnter = (key: string, nextChildren: DefaultDataItem[]) => {\r\n      onChildAddListItem(key, nextChildren);\r\n    };\r\n\r\n    const onTab = (key: string, isInside: boolean) => {\r\n      handleTab(this.key, isInside);\r\n    };\r\n\r\n    const onDestroy = (index: number) => {\r\n      this.listData.splice(index, 1);\r\n      if (!this.listData.length) {\r\n        handleDestroy(this.key);\r\n        return;\r\n      }\r\n      this.constructChildList();\r\n      this.refresh();\r\n    };\r\n\r\n    const onInsertSibling = (sibling: DefaultDataItem, replace: boolean) => {\r\n      handleInsertSiblings(this.key, [sibling], replace);\r\n    };\r\n\r\n    this.childList = [];\r\n    this.listData.forEach((data, index) => {\r\n      const childTarget = new LiComponent({ type: BlockStyleTypes.li, childList: dataListToComponents(data) });\r\n      this.childList.push(childTarget);\r\n      childTarget.mount({ handleInsertSiblings: onInsertSibling, handleEnter: onEnter, handleTab: onTab, handleDestroy: () => onDestroy(index) });\r\n      focusManager.register(this.key, childTarget.detectAnchor);\r\n      this.refresh();\r\n    });\r\n  }\r\n\r\n  // childList -> DOM\r\n  private refresh() {\r\n    (this.ref.current as any).innerHTML = '';\r\n    this.childList.forEach(child => {\r\n      const li = document.createElement('li');\r\n      li.appendChild(child.component);\r\n      this.ref.current?.appendChild(li);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isDragging, connectDragSource, connectDragPreview, connectDropTarget\r\n    } = this.props;\r\n    return connectDropTarget(\r\n      connectDragPreview(\r\n        <div className='blockWrapper'>\r\n          {connectDragSource(<div className='dragIcon'>::</div>)}\r\n          <div className='list'>\r\n            <ul ref={this.ref} style={{ opacity: isDragging ? 0.5 : 1 }} dangerouslySetInnerHTML={{ __html: '' }} />\r\n          </div>\r\n        </div>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default dndWrapper<ListProps>(List);\r\n","D:\\workspace\\MEdit\\src\\component\\Block\\Table\\index.tsx",["275"],"import * as React from 'react';\r\nimport { DefaultDataItem } from 'types/ComponentTypes';\r\n\r\nexport interface TableProps {\r\n  handleInsertParagraph: (key: string) => void;\r\n  tableData?: Array<DefaultDataItem[]>;\r\n}\r\n\r\nexport interface TableState {\r\n\r\n}\r\n\r\nclass Table extends React.Component<TableProps, TableState> {\r\n  constructor(props: TableProps) {\r\n    super(props);\r\n    console.log('here');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>table</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;","D:\\workspace\\MEdit\\src\\types\\ComponentTypes.ts",["276","277","278","279","280","281","282","283","284","285","286","287","288","289"],"export enum InlineStyleTypes {\r\n  strong = 'strong',\r\n  em = 'em',\r\n  highlight = 'highlight',\r\n  inlineCode = 'inlineCode',\r\n  del = 'del',\r\n  plainText = 'plainText',\r\n  wbr = 'wbr'\r\n}\r\n\r\nexport enum BlockStyleTypes {\r\n  header = 'header',\r\n  paragragh = 'paragraph',\r\n  quote = 'quote',\r\n  list = 'list',\r\n  li = 'li',\r\n  indentation = 'indentation',\r\n  table = 'table'\r\n}\r\n\r\nexport type HeaderLevelType = 1 | 2 | 3 | 4 | 5 | 6;\r\n\r\nexport interface DefaultDataItem {\r\n  key?: string;\r\n  type: BlockStyleTypes | InlineStyleTypes;\r\n  childList: DefaultDataItem[];\r\n  content?: string;\r\n  tableData?: Array<DefaultDataItem[]>;\r\n  listData?: Array<DefaultDataItem[]>;\r\n  imgData?: string;\r\n  headerLevel?: HeaderLevelType;\r\n\r\n}\r\n","D:\\workspace\\MEdit\\src\\component\\Inline\\Em\\index.ts",["290","291"],"import { DefaultComponentProps } from 'component/DefaultComponent';\r\nimport { InlineStyleTypes } from 'types/ComponentTypes';\r\nimport InlineComponent from '../InlineComponent';\r\n\r\ninterface EmProps extends DefaultComponentProps {\r\n\r\n}\r\n\r\nexport default class Em extends InlineComponent {\r\n  public component: Element;\r\n\r\n  constructor(props: EmProps | DefaultComponentProps) {\r\n    super(props);\r\n    const em = document.createElement('em');\r\n    em.setAttribute('class', 'em');\r\n    this.component = em;\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  public getMarkdown() {\r\n    return `*${this.getContent()}*`;\r\n  }\r\n\r\n  public getContent() {\r\n    return this.childList.reduce((pre, cur) => {\r\n      return pre + (cur as InlineComponent).getContent();\r\n    }, '');\r\n  }\r\n\r\n  public refresh() {\r\n    this.component.innerHTML = '';\r\n    this.childList.forEach(child => {\r\n      this.component.appendChild(child.component);\r\n    });\r\n  }\r\n}","D:\\workspace\\MEdit\\src\\component\\Inline\\Del\\index.ts",["292","293"],"import { DefaultComponentProps } from 'component/DefaultComponent';\r\nimport { InlineStyleTypes } from 'types/ComponentTypes';\r\nimport InlineComponent from '../InlineComponent';\r\n\r\ninterface DelProps extends DefaultComponentProps {\r\n\r\n}\r\n\r\nexport default class Del extends InlineComponent {\r\n  public component: Element;\r\n\r\n  constructor(props: DelProps) {\r\n    super(props);\r\n    this.component = document.createElement('del');\r\n    this.refresh();\r\n  }\r\n\r\n  public refresh() {\r\n    this.component.innerHTML = '';\r\n    this.childList.forEach(child => {\r\n      this.component.appendChild(child.component);\r\n    });\r\n  }\r\n\r\n  public getMarkdown() {\r\n    return `~~${this.getContent()}~~`;\r\n  }\r\n\r\n  public getContent() {\r\n    return this.childList.reduce((pre, cur) => {\r\n      return pre + (cur as InlineComponent).getContent();\r\n    }, '');\r\n  }\r\n}","D:\\workspace\\MEdit\\src\\component\\Inline\\Highlight\\index.ts",["294","295"],"import { DefaultComponentProps } from 'component/DefaultComponent';\r\nimport { InlineStyleTypes } from 'types/ComponentTypes';\r\nimport InlineComponent from '../InlineComponent';\r\n\r\ninterface HighlightProps extends DefaultComponentProps {\r\n\r\n}\r\n\r\nexport default class Highlight extends InlineComponent {\r\n  public component: Element;\r\n\r\n  constructor(props: HighlightProps | DefaultComponentProps) {\r\n    super(props);\r\n    this.component = document.createElement('mark');\r\n    this.refresh();\r\n  }\r\n\r\n  public refresh() {\r\n    this.component.innerHTML = '';\r\n    this.childList.forEach(child => {\r\n      this.component.appendChild(child.component);\r\n    });\r\n  }\r\n\r\n  public getMarkdown() {\r\n    return `==${this.getContent()}==`;\r\n  }\r\n\r\n  public getContent() {\r\n    return this.childList.reduce((pre, cur) => {\r\n      return pre + (cur as InlineComponent).getContent();\r\n    }, '');\r\n  }\r\n}","D:\\workspace\\MEdit\\src\\component\\Inline\\PlainText\\index.ts",["296"],"import { DefaultComponentProps } from 'component/DefaultComponent';\r\nimport EventBus, { BusEventTypes } from 'component/EventBus';\r\nimport { InlineStyleTypes } from 'types/ComponentTypes';\r\nimport InlineComponent, { InlineMountProps } from '../InlineComponent';\r\nimport Wbr from '../Wbr';\r\n\r\ninterface MountedPlainTextProps extends DefaultComponentProps {\r\n  content: string;\r\n}\r\ninterface UnMountedPlainTextProps extends DefaultComponentProps {\r\n  content: string;\r\n}\r\n\r\nexport default class PlainText extends InlineComponent {\r\n  content: string;\r\n\r\n  component: Element;\r\n\r\n  constructor(props: MountedPlainTextProps | UnMountedPlainTextProps) {\r\n    super(props);\r\n    const { content } = props;\r\n    this.content = content;\r\n    this.component = document.createElement('span');\r\n    this.component.appendChild(document.createTextNode(this.content));\r\n  }\r\n\r\n  public getMarkdown() {\r\n    return this.component.innerHTML;\r\n  }\r\n\r\n  public getContent() {\r\n    this.content = this.component.innerHTML;\r\n    return this.content;\r\n  }\r\n\r\n  public getComponent() {\r\n    return this.component;\r\n  }\r\n\r\n  public refresh() {\r\n    this.component.innerHTML = this.content;\r\n  }\r\n\r\n  public setContent(content: string) {\r\n    this.content = content;\r\n    // this.refresh();\r\n    if (content === this.component.innerHTML) {\r\n      return;\r\n    }\r\n    this.refresh();\r\n  }\r\n\r\n  private mountEventBus(eventBus: EventBus) {\r\n    eventBus.subscribe(BusEventTypes.recordAnchor, this.key, () => {\r\n      const selection = document.getSelection();\r\n      if (selection?.anchorNode && this.component.contains(selection.anchorNode)) {\r\n        this.recordAnchor();\r\n      }\r\n      return false;\r\n    });\r\n\r\n    eventBus.subscribe(BusEventTypes.deleteEmpty, this.key, () => {\r\n      if (document.contains(this.component)) return;\r\n      this.destroy();\r\n    });\r\n\r\n    eventBus.subscribe(BusEventTypes.findEnterAnchor, this.key, () => {\r\n      const selection = document.getSelection();\r\n      const content = this.getContent();\r\n      if (!selection?.anchorNode) return;\r\n      // 消除零宽空格的影响\r\n      if (selection.anchorNode instanceof Text && selection.anchorNode.textContent === '\\u200B') {\r\n        selection.anchorNode.remove();\r\n      }\r\n      if (this.component.contains(selection?.anchorNode)) {\r\n        const offset = selection.anchorOffset;\r\n        const curContent = content.slice(0, offset);\r\n        const nextContent = content.slice(offset);\r\n        // this.setContent(curContent);\r\n        this.inlineMountProps?.handleEnter(this.key,\r\n          curContent.length === 0 ? undefined : {\r\n            type: InlineStyleTypes.plainText,\r\n            childList: [],\r\n            content: curContent\r\n          }, nextContent.length === 0 ? undefined : {\r\n            type: InlineStyleTypes.plainText,\r\n            childList: [],\r\n            content: this.getContent().slice(offset)\r\n          });\r\n      }\r\n      // TODO 这里只针对paragraph进行设计，需要进行拓充\r\n      else if (selection?.anchorNode?.nodeName === 'P') {\r\n        this.inlineMountProps?.eventBus.dispatch(BusEventTypes.insertSibling);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  public mount(props: InlineMountProps) {\r\n    this.mounted = true;\r\n    this.inlineMountProps = props;\r\n    this.mountEventBus(this.inlineMountProps.eventBus);\r\n  }\r\n\r\n  private recordAnchor() {\r\n    if (!this.mounted) throw new Error('unmount component cannot use this function');\r\n    const selection = document.getSelection();\r\n    if (!selection) throw new Error('selection is null');\r\n    if (!this.component.contains(selection.anchorNode)) {\r\n      console.error(`active node is ${selection.anchorNode} instead of ${this.component}`);\r\n    }\r\n\r\n    this.content = this.component.innerHTML.replace(/&nbsp;/g, ' ').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');\r\n    const offset = selection.anchorOffset;\r\n    const curContent = this.content.slice(0, offset);\r\n    const nextContent = this.content.slice(offset);\r\n    this.setContent(curContent.replace(/\\s/g, '&nbsp;'));\r\n    const wbr = new Wbr({ type: InlineStyleTypes.wbr, childList: [] });\r\n    if (nextContent.length) {\r\n      const sibling = new PlainText({ type: InlineStyleTypes.plainText, childList: [], content: nextContent.replace(/\\s/g, '&nbsp;') });\r\n      this.inlineMountProps!.handleInsertSibling(this.key, [wbr, sibling], !(curContent.length));\r\n    } else {\r\n      this.inlineMountProps!.handleInsertSibling(this.key, [wbr], !(curContent.length));\r\n    }\r\n  }\r\n\r\n  public setAnchor(offset: number = 0) {\r\n    if (!this.mounted) throw new Error('no mount component cannot setAnchor');\r\n    const selection = document.getSelection();\r\n    if (offset === -1) {\r\n      selection?.collapse(this.component, this.getContent.length + 1);\r\n      return;\r\n    }\r\n    selection?.collapse(this.component, offset);\r\n  }\r\n}","D:\\workspace\\MEdit\\src\\component\\Block\\Paragraph\\EventManager.ts",["297"],"export interface EventManagerProps {\r\n  target: Element;\r\n  handleEnter: () => void;\r\n  handleCtrlEnter: () => void;\r\n  handleDelete: (isKeyDown: boolean) => void;\r\n  handleReParse: () => void;\r\n  handleTab: (isInside: boolean) => void;\r\n\r\n}\r\nexport default class EventManager {\r\n  target: Element;\r\n\r\n  isCtrlPress: boolean;\r\n\r\n  isShiftPress: boolean;\r\n\r\n  isComposing: boolean;\r\n\r\n  onEnter: () => void;\r\n\r\n  onCtrlEnter: () => void;\r\n\r\n  onDelete: (isKeyDown: boolean) => void;\r\n\r\n  reParse: () => void;\r\n\r\n  isInputing: boolean;\r\n\r\n  onTab: (isInside: boolean) => void;\r\n\r\n  constructor(props: EventManagerProps) {\r\n    const { target, handleEnter, handleCtrlEnter, handleDelete, handleReParse, handleTab } = props;\r\n    this.target = target;\r\n    this.onEnter = handleEnter;\r\n    this.onCtrlEnter = handleCtrlEnter;\r\n    this.onDelete = handleDelete;\r\n    this.reParse = handleReParse;\r\n    this.onTab = handleTab;\r\n    this.isComposing = false;\r\n    this.isInputing = false;\r\n    this.isCtrlPress = false;\r\n    this.isShiftPress = false;\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.target.addEventListener('keydown', (e: any) => {\r\n      if (e.code === 'ControlLeft') {\r\n        this.isCtrlPress = true;\r\n      } else if (e.code === 'ShiftLeft') {\r\n        this.isShiftPress = true;\r\n      }\r\n\r\n      if (this.isComposing) return;\r\n      if (e.code === 'Backspace' || e.code === 'Delete') {\r\n        // something\r\n        this.onDelete(true);\r\n\r\n      } else if (e.code === 'Enter') {\r\n        e.preventDefault();\r\n        if (this.isCtrlPress) this.onCtrlEnter();\r\n        else this.onEnter();\r\n      } else if (e.code === 'Tab') {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.onTab(!this.isShiftPress);\r\n      }\r\n    });\r\n\r\n    this.target.addEventListener('input', (e: InputEventInit) => {\r\n      if (e.inputType?.match(/insert/)) {\r\n        this.isInputing = true;\r\n      }\r\n      if (e.inputType === 'deleteContentForward' || e.inputType === 'deleteContentBackward') {\r\n        console.log('delete trigger');\r\n        this.onDelete(false);\r\n      }\r\n    });\r\n    this.target.addEventListener('compositionstart', (e: InputEventInit) => {\r\n      this.isComposing = true;\r\n    });\r\n    this.target.addEventListener('compositionend', (e: InputEventInit) => {\r\n      this.isComposing = false;\r\n    });\r\n    this.target.addEventListener('keyup', (e: any) => {\r\n      if (e.code === 'ControlLeft') {\r\n        this.isCtrlPress = false;\r\n      } else if (e.code === 'ShiftLeft') {\r\n        this.isShiftPress = false;\r\n      }\r\n\r\n      if (this.isComposing || !this.isInputing) return;\r\n      // 触发解析\r\n      this.reParse();\r\n      this.isInputing = false;\r\n    });\r\n  }\r\n}","D:\\workspace\\MEdit\\src\\component\\Block\\EditableBlock.ts",["298","299","300","301","302","303","304","305","306","307","308","309","310","311","312"],"import DefaultComponent, { DefaultComponentProps } from 'component/DefaultComponent';\r\nimport InlineComponent from 'component/Inline/InlineComponent';\r\nimport PlainText from 'component/Inline/PlainText';\r\nimport Wbr from 'component/Inline/Wbr';\r\nimport { BlockStyleTypes, DefaultDataItem, InlineStyleTypes } from 'types/ComponentTypes';\r\nimport { componentsToDataList } from 'utils/editorTools/componentToData';\r\nimport { dataListToComponents } from 'utils/editorTools/dataToComponent';\r\nimport { getDataList } from 'utils/markdown';\r\nimport EventBus, { BusEventTypes } from '../EventBus';\r\nimport EventManager from './Paragraph/EventManager';\r\n\r\nexport interface BlockMountProps {\r\n  handleInsertSiblings: (components: DefaultDataItem, replace: boolean) => void;\r\n  handleEnter: (key: string, nextChildren: DefaultDataItem[]) => void;\r\n  handleTab: (key: string, isInside: boolean) => void;\r\n  handleDestroy: () => void;\r\n}\r\n\r\nexport default abstract class EditableBlock extends DefaultComponent {\r\n  public eventBus: EventBus;\r\n\r\n  public component: Element;\r\n\r\n  blockMountProps?: BlockMountProps;\r\n\r\n  oneStepToDelete: boolean;\r\n\r\n  doMarkdownParse: boolean;\r\n\r\n  constructor(props: DefaultComponentProps & { component: Element, doMarkdownParse?: boolean }) {\r\n    super(props);\r\n    const { component, doMarkdownParse = true } = props;\r\n    this.doMarkdownParse = doMarkdownParse;\r\n    this.component = component;\r\n    this.component.setAttribute('contenteditable', 'true');\r\n    this.component.setAttribute('style', 'outline: none;');\r\n    this.eventBus = new EventBus();\r\n    this.oneStepToDelete = false;\r\n    this.eventBus.subscribe(BusEventTypes.insertSibling, this.key, (values?: { dataList?: DefaultDataItem[] }) => {\r\n      const { dataList = [] } = values || {};\r\n      switch (this.type) {\r\n        case BlockStyleTypes.paragragh:\r\n          this.blockMountProps!.handleInsertSiblings({ type: BlockStyleTypes.paragragh, childList: dataList }, false);\r\n          break;\r\n        case BlockStyleTypes.li:\r\n          this.blockMountProps!.handleEnter(this.key, []);\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n    this.InitEventManager();\r\n    this.refresh();\r\n  }\r\n\r\n  public InitEventManager() {\r\n    const handleEnter = () => {\r\n      this.oneStepToDelete = false;\r\n      this.eventBus.dispatch(BusEventTypes.findEnterAnchor);\r\n    };\r\n\r\n    const handleCtrlEnter = () => {\r\n      this.oneStepToDelete = false;\r\n      this.blockMountProps?.handleInsertSiblings({ type: BlockStyleTypes.paragragh, childList: [] }, false);\r\n    };\r\n\r\n    // component -> childList, 也是原子操作\r\n    const format = () => {\r\n      const childNodes = this.component.childNodes;\r\n      let childIndex = 0;\r\n\r\n      for (let i = 0; i < childNodes.length; i++) {\r\n        const child = childNodes[i];\r\n        if (child !== this.childList[childIndex]?.component) {\r\n          const newChild = new PlainText({ type: InlineStyleTypes.plainText, childList: [], content: child.textContent || '' });\r\n          this.mountChild(newChild);\r\n          this.component.insertBefore(newChild.component, child);\r\n          this.component.removeChild(child);\r\n          this.childList.splice(childIndex, 0, newChild);\r\n        }\r\n        childIndex += 1;\r\n      }\r\n    };\r\n\r\n    // 为了在paragraph为空时监听delelte，设置了input和keydown两个监听器\r\n    const handleDelete = (isKeyDown: boolean) => {\r\n      if (isKeyDown) {\r\n        if (this.oneStepToDelete) {\r\n          this.destroy();\r\n        }\r\n        return;\r\n      }\r\n      this.eventBus.dispatch(BusEventTypes.deleteEmpty);\r\n      // this.eventBus.dispatch(BusEventTypes.recordAnchor, {}, true);\r\n      // this.parseAnchor();\r\n      // console.log('after parseAnchor , the component: ', this.component.innerHTML);\r\n      if (!this.childList.length) {\r\n        console.log('handle empty paragraph~~');\r\n        if (this.oneStepToDelete) {\r\n          this.destroy();\r\n        } else {\r\n          this.oneStepToDelete = true;\r\n        }\r\n      }\r\n    };\r\n\r\n    // 消除零宽空格\r\n    const removeNoWidthSpace = () => {\r\n      const func = (node: Node) => {\r\n        if (node instanceof Text && node.textContent?.match(/\\u200B/u)) {\r\n          const content = node.textContent;\r\n          if (content === '\\u200B') {\r\n            node.remove();\r\n          }\r\n          return;\r\n        }\r\n        node.childNodes.forEach(child => func(child));\r\n      };\r\n      func(this.component);\r\n    };\r\n\r\n    const BlockTrans = (md: string) => {\r\n      if (md.replace('<wbr>', '') === '-&nbsp;') {\r\n        this.blockMountProps!.handleInsertSiblings({ type: BlockStyleTypes.list, childList: [] }, true);\r\n        return true;\r\n      } \r\n      if (md.replace('<wbr>', '') === '&gt;&nbsp;') {\r\n        this.blockMountProps!.handleInsertSiblings({ type: BlockStyleTypes.quote, childList: [] }, true);\r\n        return true;\r\n      } \r\n      if (md.replace('<wbr>', '').match(/^(#{1,6})&nbsp;$/)) {\r\n        const level = (md.replace('<wbr>', '').match(/^(#{1,6})&nbsp;$/) as any)[1].length;\r\n        this.blockMountProps!.handleInsertSiblings({ type: BlockStyleTypes.header, childList: [], headerLevel:level }, true);\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    // 核心逻辑\r\n    const handleReParse = () => {\r\n      this.oneStepToDelete = false;\r\n      removeNoWidthSpace();\r\n      this.eventBus.dispatch(BusEventTypes.recordAnchor, {}, true, () => {\r\n        const wbr = new Wbr({ type: InlineStyleTypes.wbr, childList: [] });\r\n        this.mountChild(wbr);\r\n        this.childList.push(wbr);\r\n        this.component.appendChild(wbr.component);\r\n      });\r\n      format();\r\n      if (this.doMarkdownParse) {\r\n        const md = this.getMarkdown().replace('\\u200B', '');\r\n        console.log('md: ', md);\r\n\r\n        if (this.type === BlockStyleTypes.paragragh && BlockTrans(md)) return;\r\n\r\n        const dataList = getDataList(md);\r\n        // console.log('dataList: ', dataList);\r\n        this.setChildList(dataList);\r\n      }\r\n      this.eventBus.dispatch(BusEventTypes.parseAnchor, {}, true);\r\n      // console.log('after parseAnchor , the component: ', this.component.innerHTML);\r\n      this.eventBus.dispatch(BusEventTypes.showMarkdown, { show: true });\r\n    };\r\n\r\n    const handleTab = (isInside: boolean) => {\r\n      if (!this.mounted) throw new Error('unmounted component cannot use this function');\r\n      this.blockMountProps!.handleTab(this.key, isInside);\r\n    };\r\n\r\n    const em = new EventManager({ target: this.component, handleEnter, handleCtrlEnter, handleDelete, handleReParse, handleTab });\r\n  }\r\n\r\n  public getMarkdown() {\r\n    return this.childList.reduce((pre, cur) => {\r\n      return pre + cur.getMarkdown();\r\n    }, '');\r\n  }\r\n\r\n  public getPosition = (): [number, number] => {\r\n    return [this.component.clientTop, this.component.clientHeight + this.component.clientTop];\r\n  };\r\n\r\n  public onChildInsertSibling = (key: string, siblings: DefaultComponent[], replace: boolean) => {\r\n    if (!this.mounted) throw new Error('unmounted component cannot use this function');\r\n    const index = this.findChildIndex(key);\r\n    if (replace) {\r\n      const newList = this.childList.slice();\r\n      newList.splice(index, 1, ...siblings);\r\n      this.setChildList(newList);\r\n    } else {\r\n      const newList = this.childList.slice();\r\n      newList.splice(index + 1, 0, ...siblings);\r\n      this.setChildList(newList);\r\n    }\r\n  };\r\n\r\n  public detectAnchor = (): boolean => {\r\n    const selection = document.getSelection();\r\n    if (this.component.contains(selection?.anchorNode || null)) {\r\n      if (!this.showMarkdown) {\r\n        this.showMarkdown = true;\r\n        this.eventBus.dispatch(BusEventTypes.showMarkdown, { show: true });\r\n      }\r\n      return true;\r\n    }\r\n    // eslint-disable-next-line\r\n    else {\r\n      if (this.showMarkdown) {\r\n        this.showMarkdown = false;\r\n        this.eventBus.dispatch(BusEventTypes.showMarkdown, { show: false });\r\n      }\r\n      return false;\r\n    }\r\n  };\r\n\r\n  public appendChild(child: InlineComponent) {\r\n    this.setChildList([...this.childList, child]);\r\n  }\r\n\r\n  // 原子操作，不涉及setChildList\r\n  public destroyChild(key: string) {\r\n    console.log('destroy: ', key);\r\n    const index = this.findChildIndex(key);\r\n    this.childList.splice(index, 1);\r\n    this.eventBus.remove(key);\r\n    const childNode = this.component.childNodes[index];\r\n    if (childNode && this.component.contains(childNode))\r\n      this.component.removeChild(this.component.childNodes[index]);\r\n  }\r\n\r\n  public destroy = () => {\r\n    this.blockMountProps?.handleDestroy();\r\n  };\r\n\r\n  // childList -> component\r\n  public setChildList(childList: DefaultComponent[] | DefaultDataItem[]) {\r\n    diff(this, childList);\r\n  }\r\n\r\n  public setAnchor(offset: number) {\r\n    const selection = document.getSelection();\r\n    if (offset === 0) {\r\n      selection?.collapse(this.component, 0);\r\n    } else if (offset === -1) {\r\n      selection?.collapse(this.component);\r\n    }\r\n  }\r\n\r\n  private onChildEnter(key: string, _cur?: DefaultDataItem, _next?: DefaultDataItem) {\r\n    if (!this.mounted) throw new Error('unmounted component cannot use this function');\r\n    const index = this.findChildIndex(key);\r\n    const curDataList = componentsToDataList(this.childList.slice(0, index) as InlineComponent[]);\r\n    const nextDataList = componentsToDataList(this.childList.slice(index + 1) as InlineComponent[]);\r\n    _cur && curDataList.push(_cur);\r\n    _next && nextDataList.unshift(_next);\r\n    this.setChildList(curDataList);\r\n    this.blockMountProps!.handleEnter(this.key, nextDataList);\r\n  }\r\n\r\n  private onChildDestroy(key: string) {\r\n    console.log('the key to destroy: ', key);\r\n    const index = this.childList.findIndex(child => child.key === key);\r\n    const newList = this.childList.slice();\r\n    newList.splice(index, 1);\r\n    this.setChildList(newList);\r\n\r\n    // this.component.removeChild(this.component.childNodes[index]);\r\n  }\r\n\r\n  public mountChild(child: InlineComponent) {\r\n    const that = this;\r\n    child.mount({\r\n      eventBus: this.eventBus,\r\n      handleEnter: this.onChildEnter.bind(that),\r\n      handleDestroy: this.onChildDestroy.bind(that),\r\n      handleInsertSibling: this.onChildInsertSibling.bind(that)\r\n    });\r\n  }\r\n\r\n  public mount(props: BlockMountProps) {\r\n    this.mounted = true;\r\n    this.blockMountProps = props;\r\n    this.childList.forEach(child => {\r\n      this.mountChild(child as InlineComponent);\r\n    });\r\n  }\r\n\r\n  abstract refresh(): void;\r\n\r\n}\r\n\r\n// 针对inlineComponent的diff算法\r\nexport function diff(root: DefaultComponent, DataTree: (DefaultDataItem | DefaultComponent)[]): DefaultComponent {\r\n  console.log('==========diff start');\r\n  console.log(' -- root.innerHTML: ', root.component.innerHTML);\r\n  console.log(' -- root.childList: ');\r\n  root.childList.forEach(child => {\r\n    console.log(child.type, (child as PlainText).content);\r\n    if (child.childList.length) {\r\n      child.childList.forEach(c => console.log(c.type, (c as PlainText).content));\r\n    }\r\n  });\r\n  console.log(' -- DataTree: ', DataTree.length, DataTree);\r\n  const componentTree = root.childList;\r\n  let lastIndex = 0;\r\n  let resultList: Array<number> = [];\r\n  DataTree.forEach((item: DefaultDataItem | DefaultComponent) => {\r\n    let flag = false;\r\n    for (let i = lastIndex; i < componentTree.length; i++) {\r\n      if (item.type === componentTree[i].type) {\r\n        if (item.type === InlineStyleTypes.plainText) {\r\n          (componentTree[i] as PlainText).setContent(item instanceof DefaultComponent ? (item as PlainText).content : item.content || '');\r\n        } else if (componentTree[i].childList.length || item.childList.length) {\r\n          diff(componentTree[i], item.childList);\r\n        }\r\n        resultList.push(i);\r\n        lastIndex = i + 1;\r\n        flag = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!flag) {\r\n      console.log('insert new component: ', item);\r\n      if (item instanceof DefaultComponent) {\r\n        root.mountChild(item);\r\n        componentTree.splice(lastIndex, 0, item as DefaultComponent);\r\n        root.component.insertBefore(item.component, root.component.childNodes[lastIndex]);\r\n        resultList.push(lastIndex);\r\n        lastIndex += 1;\r\n      } else {\r\n        const component: InlineComponent = dataListToComponents([item])[0];\r\n        root.mountChild(component);\r\n        componentTree.splice(lastIndex, 0, component);\r\n        root.component.insertBefore(component.component, root.component.childNodes[lastIndex]);\r\n        resultList.push(lastIndex);\r\n        lastIndex += 1;\r\n      }\r\n    }\r\n  });\r\n  resultList.push(Math.max(componentTree.length, DataTree.length));\r\n  resultList = resultList.reverse();\r\n  resultList.push(-1);\r\n  resultList.reduce((pre: number, cur: number): number => {\r\n    if (pre - cur > 1) {\r\n      for (let i = pre - 1; i > cur; i--) {\r\n        console.log('destroy: ', i, componentTree[i]);\r\n        if (componentTree[i]) {\r\n          root.destroyChild(componentTree[i].key);\r\n        }\r\n      }\r\n    }\r\n    return cur;\r\n  });\r\n  console.log('==========diff end');\r\n  return root;\r\n}","D:\\workspace\\MEdit\\src\\component\\Block\\dndWrapper.tsx",[],"D:\\workspace\\MEdit\\src\\containers\\header\\index.tsx",[],"D:\\workspace\\MEdit\\src\\containers\\header\\HeaderMenu.tsx",["313","314","315","316","317","318"],"D:\\workspace\\MEdit\\src\\utils\\editorTools\\FocusManager.ts",["319","320"],"/**\r\n * FocusManager是用来根据全局光标位置控制showmarkdown变量的\r\n * 同时还兼顾选中一个或多个块状组件时的逻辑\r\n */\r\nexport interface FocusManagerProps {\r\n  rootRef: React.RefObject<HTMLDivElement>;\r\n}\r\nexport default class FocusManager {\r\n  public rootRef: React.RefObject<HTMLDivElement>;\r\n\r\n  private inited: boolean = false;\r\n\r\n  public componentList: { key: string, detectAnchor: () => boolean }[];\r\n\r\n  constructor(props: FocusManagerProps) {\r\n    const { rootRef } = props;\r\n    this.rootRef = rootRef;\r\n    // just EditableBlock\r\n    this.componentList = [];\r\n    this.init();\r\n  }\r\n\r\n  public init() {\r\n    if (!this.rootRef.current) return;\r\n    if (this.inited) return;\r\n    this.rootRef.current!.addEventListener('click', e => {\r\n      let flag = false;\r\n      this.componentList.forEach(component => {\r\n        if (component.detectAnchor()) flag = true;\r\n      });\r\n      if (!flag) console.error('cannot find anchor');\r\n    });\r\n\r\n    this.rootRef.current!.addEventListener('keydown', e => {\r\n      if (e.code === 'ArrowUp' || e.code === 'ArrowDown' || e.code === 'ArrowLeft' || e.code === 'ArrowRight') {\r\n        let flag = false;\r\n        this.componentList.forEach(component => {\r\n          if (component.detectAnchor()) flag = true;\r\n        });\r\n        if (!flag) console.error('cannot find anchor');\r\n      }\r\n    });\r\n  }\r\n\r\n  public reRank() {\r\n\r\n  }\r\n\r\n  public register(key: string, detectAnchor: () => boolean) {\r\n    this.componentList.push({ key, detectAnchor });\r\n    this.reRank();\r\n  }\r\n\r\n  public remove() {\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}","D:\\workspace\\MEdit\\src\\utils\\editorTools\\getKey.ts",[],"D:\\workspace\\MEdit\\src\\utils\\editorTools\\dataToComponent.ts",[],"D:\\workspace\\MEdit\\src\\utils\\editorTools\\componentToData.ts",[],"D:\\workspace\\MEdit\\src\\utils\\notify\\index.ts",["321","322"],"import { notification } from 'antd';\r\n\r\nexport enum notifyType {\r\n  loginSuccessful = '登录成功.修改将定期自动保存',\r\n  loginFailed = '登录失败.请检查网络并重试'\r\n}\r\n\r\nconst notify = (type: notifyType) => {\r\n  return notification.open({\r\n    message: type.split('.')[0],\r\n    description: type.split('.')[1],\r\n    duration: 1.5\r\n  });\r\n};\r\n\r\nexport default notify;","D:\\workspace\\MEdit\\src\\utils\\api\\index.ts",["323","324","325","326"],"const axios = require('axios');\r\n\r\naxios.defaults.withCredentials = true;\r\nconsole.log(axios.defaults);\r\nexport default {\r\n  register: async (userName: string, password: string) => {\r\n    const api = `http://127.0.0.1:8888/register?userName=${userName}&password=${password}`;\r\n    axios.get(api)\r\n      .then((response: any) => {\r\n        console.log(response);\r\n      });\r\n  },\r\n  login: async (userName: string, password: string) => {\r\n    const api = 'http://127.0.0.1:8888/login';\r\n    const values = {\r\n      userName,\r\n      password\r\n    };\r\n    return axios.post(api, values);\r\n  },\r\n  getArticle: (user: string, title: string) => {\r\n    const api = `http://127.0.0.1:8888/getArticleContentByTiTle?user=${user}&title=${title}`;\r\n    axios.get(api)\r\n      .then((response: any) => {\r\n        console.log(response);\r\n      });\r\n  }\r\n};","D:\\workspace\\MEdit\\src\\utils\\download\\index.ts",[],"D:\\workspace\\MEdit\\src\\component\\Block\\Quote\\index.tsx",["327","328","329","330","331","332"],"import React, { RefObject } from 'react';\r\nimport DefaultComponent, { DefaultComponentProps } from 'component/DefaultComponent';\r\nimport PlainText from 'component/Inline/PlainText';\r\nimport { BlockStyleTypes, DefaultDataItem, InlineStyleTypes } from 'types/ComponentTypes';\r\nimport { dataListToComponents } from 'utils/editorTools/dataToComponent';\r\nimport EditableBlock from '../EditableBlock';\r\nimport dndWrapper from '../dndWrapper';\r\nimport './style.scss';\r\nimport { defaultBlockProps } from '../types';\r\n\r\nexport class QuoteComponent extends EditableBlock {\r\n  constructor(props: DefaultComponentProps) {\r\n    super({ ...props, component: document.createElement('p') });\r\n    this.doMarkdownParse = false;\r\n  }\r\n\r\n  public refresh() {\r\n    this.component.innerHTML = '';\r\n    this.childList.forEach(child => {\r\n      this.component.appendChild(child.component);\r\n    });\r\n  }\r\n\r\n  public clone(childList: DefaultComponent[] = []) {\r\n    throw new Error('cannot use this function');\r\n\r\n  }\r\n\r\n  static createDefault = () => {\r\n    throw new Error('cannot use this function');\r\n  };\r\n\r\n}\r\n\r\n\r\nexport interface QuoteProps extends defaultBlockProps {\r\n  [propName: string]: any;\r\n}\r\n\r\nclass Quote extends React.Component<QuoteProps> {\r\n  target: QuoteComponent;\r\n\r\n  ref: RefObject<HTMLDivElement>;\r\n\r\n  key: string;\r\n\r\n  constructor(props: QuoteProps) {\r\n    super(props);\r\n    this.ref = React.createRef();\r\n    const { id, mountValues } = props;\r\n    const { childList, handleTab, handleInsertSiblings, handleDestroy, focusManager } = mountValues;\r\n    this.key = id;\r\n    const onParagraphInsertSibling = (sibling: DefaultDataItem, replace: boolean) => {\r\n      handleInsertSiblings(this.key, [sibling], replace);\r\n    };\r\n\r\n    const onEnter = (key: string, nextChildren: DefaultDataItem[]) => {\r\n      handleInsertSiblings(this.key, [{ type: BlockStyleTypes.paragragh, childList: nextChildren }], false);\r\n    };\r\n\r\n    const onTab = (key: string, isInside: boolean) => {\r\n      handleTab(this.key, isInside);\r\n    };\r\n\r\n    const onDestroy = () => {\r\n      console.log('destroy!!!!!!!!!!!!!!!!!!!!!');\r\n      handleDestroy(this.key);\r\n    };\r\n\r\n    this.target = new QuoteComponent({\r\n      type: BlockStyleTypes.paragragh, childList: dataListToComponents(childList)\r\n    });\r\n    this.target.mount({ handleInsertSiblings: onParagraphInsertSibling, handleEnter: onEnter, handleTab: onTab, handleDestroy: onDestroy });\r\n    focusManager.register(this.key, this.target.detectAnchor);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refresh();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.refresh();\r\n  }\r\n\r\n  public getDataList() {\r\n    return this.target.getDataList();\r\n  }\r\n\r\n  public getMarkdown() {\r\n    return `> ${this.target.getMarkdown()}`;\r\n  }\r\n\r\n  private refresh() {\r\n    this.ref.current!.appendChild(this.target.component);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      // 这些 props 由 React DnD注入，参考`collect`函数定义\r\n      isDragging, connectDragSource, connectDragPreview, connectDropTarget\r\n    } = this.props;\r\n    return connectDropTarget(\r\n      connectDragPreview(\r\n        <div className='blockWrapper'>\r\n          {connectDragSource(<div className='dragIcon'>::</div>)}\r\n          <div className='quote' style={{ opacity: isDragging ? 0.5 : 1 }} ref={this.ref} dangerouslySetInnerHTML={{ __html: '' }} />\r\n        </div>\r\n\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default dndWrapper<QuoteProps>(Quote);",{"ruleId":"333","replacedBy":"334"},{"ruleId":"335","replacedBy":"336"},{"ruleId":"337","replacedBy":"338"},{"ruleId":"339","replacedBy":"340"},{"ruleId":"341","replacedBy":"342"},{"ruleId":"343","replacedBy":"344"},{"ruleId":"345","replacedBy":"346"},{"ruleId":"347","severity":1,"message":"348","line":26,"column":23,"nodeType":"349","endLine":26,"endColumn":27},{"ruleId":"333","replacedBy":"350"},{"ruleId":"335","replacedBy":"351"},{"ruleId":"352","replacedBy":"353"},{"ruleId":"337","replacedBy":"354"},{"ruleId":"339","replacedBy":"355"},{"ruleId":"341","replacedBy":"356"},{"ruleId":"343","replacedBy":"357"},{"ruleId":"345","replacedBy":"358"},{"ruleId":"347","severity":1,"message":"359","line":29,"column":6,"nodeType":"360","endLine":29,"endColumn":8,"suggestions":"361"},{"ruleId":"333","replacedBy":"362"},{"ruleId":"335","replacedBy":"363"},{"ruleId":"352","replacedBy":"364"},{"ruleId":"337","replacedBy":"365"},{"ruleId":"339","replacedBy":"366"},{"ruleId":"341","replacedBy":"367"},{"ruleId":"343","replacedBy":"368"},{"ruleId":"345","replacedBy":"369"},{"ruleId":"347","severity":1,"message":"359","line":14,"column":6,"nodeType":"360","endLine":14,"endColumn":8,"suggestions":"370"},{"ruleId":"371","severity":1,"message":"372","line":1,"column":6,"nodeType":"373","messageId":"374","endLine":1,"endColumn":25},{"ruleId":"375","severity":1,"message":"372","line":1,"column":6,"nodeType":"373","messageId":"374","endLine":1,"endColumn":25},{"ruleId":"371","severity":1,"message":"376","line":7,"column":6,"nodeType":"373","messageId":"374","endLine":7,"endColumn":15},{"ruleId":"375","severity":1,"message":"376","line":7,"column":6,"nodeType":"373","messageId":"374","endLine":7,"endColumn":15},{"ruleId":"333","replacedBy":"334"},{"ruleId":"335","replacedBy":"336"},{"ruleId":"337","replacedBy":"338"},{"ruleId":"339","replacedBy":"340"},{"ruleId":"341","replacedBy":"342"},{"ruleId":"343","replacedBy":"344"},{"ruleId":"345","replacedBy":"346"},{"ruleId":"371","severity":1,"message":"377","line":2,"column":10,"nodeType":"373","messageId":"374","endLine":2,"endColumn":26},{"ruleId":"375","severity":1,"message":"377","line":2,"column":10,"nodeType":"373","messageId":"374","endLine":2,"endColumn":26},{"ruleId":"371","severity":1,"message":"378","line":3,"column":10,"nodeType":"373","messageId":"374","endLine":3,"endColumn":25},{"ruleId":"375","severity":1,"message":"378","line":3,"column":10,"nodeType":"373","messageId":"374","endLine":3,"endColumn":25},{"ruleId":"371","severity":1,"message":"377","line":3,"column":44,"nodeType":"373","messageId":"374","endLine":3,"endColumn":60},{"ruleId":"375","severity":1,"message":"377","line":3,"column":44,"nodeType":"373","messageId":"374","endLine":3,"endColumn":60},{"ruleId":"379","severity":1,"message":"380","line":16,"column":3,"nodeType":"381","messageId":"382","endLine":18,"endColumn":4},{"ruleId":"383","severity":1,"message":"384","line":30,"column":7,"nodeType":"385","messageId":"386","endLine":30,"endColumn":18},{"ruleId":"383","severity":1,"message":"384","line":52,"column":5,"nodeType":"385","messageId":"386","endLine":52,"endColumn":16},{"ruleId":"383","severity":1,"message":"384","line":100,"column":5,"nodeType":"385","messageId":"386","endLine":100,"endColumn":16},{"ruleId":"371","severity":1,"message":"387","line":7,"column":8,"nodeType":"373","messageId":"374","endLine":7,"endColumn":20},{"ruleId":"375","severity":1,"message":"387","line":7,"column":8,"nodeType":"373","messageId":"374","endLine":7,"endColumn":20},{"ruleId":"383","severity":1,"message":"384","line":223,"column":7,"nodeType":"385","messageId":"386","endLine":223,"endColumn":18},{"ruleId":"383","severity":1,"message":"384","line":252,"column":5,"nodeType":"385","messageId":"386","endLine":252,"endColumn":16},{"ruleId":"383","severity":1,"message":"384","line":258,"column":5,"nodeType":"385","messageId":"386","endLine":258,"endColumn":16},{"ruleId":"383","severity":1,"message":"384","line":75,"column":7,"nodeType":"385","messageId":"386","endLine":75,"endColumn":18},{"ruleId":"388","severity":1,"message":"389","line":115,"column":95,"nodeType":"390","messageId":"391","endLine":115,"endColumn":135},{"ruleId":"371","severity":1,"message":"392","line":2,"column":3,"nodeType":"373","messageId":"374","endLine":2,"endColumn":10},{"ruleId":"371","severity":1,"message":"393","line":3,"column":3,"nodeType":"373","messageId":"374","endLine":3,"endColumn":15},{"ruleId":"371","severity":1,"message":"394","line":4,"column":3,"nodeType":"373","messageId":"374","endLine":4,"endColumn":14},{"ruleId":"371","severity":1,"message":"395","line":5,"column":3,"nodeType":"373","messageId":"374","endLine":5,"endColumn":15},{"ruleId":"371","severity":1,"message":"396","line":6,"column":3,"nodeType":"373","messageId":"374","endLine":6,"endColumn":14},{"ruleId":"371","severity":1,"message":"397","line":7,"column":3,"nodeType":"373","messageId":"374","endLine":7,"endColumn":18},{"ruleId":"371","severity":1,"message":"398","line":8,"column":3,"nodeType":"373","messageId":"374","endLine":8,"endColumn":14},{"ruleId":"371","severity":1,"message":"399","line":9,"column":3,"nodeType":"373","messageId":"374","endLine":9,"endColumn":16},{"ruleId":"383","severity":1,"message":"384","line":28,"column":7,"nodeType":"385","messageId":"386","endLine":28,"endColumn":20},{"ruleId":"383","severity":1,"message":"384","line":42,"column":9,"nodeType":"385","messageId":"386","endLine":42,"endColumn":22},{"ruleId":"371","severity":1,"message":"400","line":4,"column":8,"nodeType":"373","messageId":"374","endLine":4,"endColumn":17},{"ruleId":"375","severity":1,"message":"400","line":4,"column":8,"nodeType":"373","messageId":"374","endLine":4,"endColumn":17},{"ruleId":"371","severity":1,"message":"401","line":6,"column":10,"nodeType":"373","messageId":"374","endLine":6,"endColumn":30},{"ruleId":"375","severity":1,"message":"401","line":6,"column":10,"nodeType":"373","messageId":"374","endLine":6,"endColumn":30},{"ruleId":"371","severity":1,"message":"402","line":58,"column":13,"nodeType":"373","messageId":"374","endLine":58,"endColumn":22},{"ruleId":"375","severity":1,"message":"402","line":58,"column":13,"nodeType":"373","messageId":"374","endLine":58,"endColumn":22},{"ruleId":"383","severity":1,"message":"384","line":72,"column":7,"nodeType":"385","messageId":"386","endLine":72,"endColumn":18},{"ruleId":"388","severity":1,"message":"389","line":111,"column":92,"nodeType":"390","messageId":"391","endLine":111,"endColumn":132},{"ruleId":"383","severity":1,"message":"384","line":15,"column":5,"nodeType":"385","messageId":"386","endLine":15,"endColumn":16},{"ruleId":"333","replacedBy":"403"},{"ruleId":"335","replacedBy":"404"},{"ruleId":"352","replacedBy":"405"},{"ruleId":"337","replacedBy":"406"},{"ruleId":"339","replacedBy":"407"},{"ruleId":"341","replacedBy":"408"},{"ruleId":"343","replacedBy":"409"},{"ruleId":"345","replacedBy":"410"},{"ruleId":"411","severity":1,"message":"412","line":27,"column":5,"nodeType":"413","messageId":"414","endLine":34,"endColumn":19},{"ruleId":"383","severity":1,"message":"384","line":62,"column":5,"nodeType":"385","messageId":"386","endLine":62,"endColumn":16},{"ruleId":"383","severity":1,"message":"384","line":72,"column":5,"nodeType":"385","messageId":"386","endLine":72,"endColumn":16},{"ruleId":"388","severity":1,"message":"389","line":172,"column":74,"nodeType":"390","messageId":"391","endLine":172,"endColumn":114},{"ruleId":"383","severity":1,"message":"384","line":16,"column":5,"nodeType":"385","messageId":"386","endLine":16,"endColumn":16},{"ruleId":"371","severity":1,"message":"415","line":2,"column":3,"nodeType":"373","messageId":"374","endLine":2,"endColumn":9},{"ruleId":"371","severity":1,"message":"416","line":3,"column":3,"nodeType":"373","messageId":"374","endLine":3,"endColumn":5},{"ruleId":"371","severity":1,"message":"417","line":4,"column":3,"nodeType":"373","messageId":"374","endLine":4,"endColumn":12},{"ruleId":"371","severity":1,"message":"418","line":5,"column":3,"nodeType":"373","messageId":"374","endLine":5,"endColumn":13},{"ruleId":"371","severity":1,"message":"419","line":6,"column":3,"nodeType":"373","messageId":"374","endLine":6,"endColumn":6},{"ruleId":"371","severity":1,"message":"420","line":7,"column":3,"nodeType":"373","messageId":"374","endLine":7,"endColumn":12},{"ruleId":"371","severity":1,"message":"421","line":8,"column":3,"nodeType":"373","messageId":"374","endLine":8,"endColumn":6},{"ruleId":"371","severity":1,"message":"422","line":12,"column":3,"nodeType":"373","messageId":"374","endLine":12,"endColumn":9},{"ruleId":"371","severity":1,"message":"423","line":13,"column":3,"nodeType":"373","messageId":"374","endLine":13,"endColumn":12},{"ruleId":"371","severity":1,"message":"424","line":14,"column":3,"nodeType":"373","messageId":"374","endLine":14,"endColumn":8},{"ruleId":"371","severity":1,"message":"425","line":15,"column":3,"nodeType":"373","messageId":"374","endLine":15,"endColumn":7},{"ruleId":"371","severity":1,"message":"426","line":16,"column":3,"nodeType":"373","messageId":"374","endLine":16,"endColumn":5},{"ruleId":"371","severity":1,"message":"427","line":17,"column":3,"nodeType":"373","messageId":"374","endLine":17,"endColumn":14},{"ruleId":"371","severity":1,"message":"428","line":18,"column":3,"nodeType":"373","messageId":"374","endLine":18,"endColumn":8},{"ruleId":"371","severity":1,"message":"377","line":2,"column":10,"nodeType":"373","messageId":"374","endLine":2,"endColumn":26},{"ruleId":"375","severity":1,"message":"377","line":2,"column":10,"nodeType":"373","messageId":"374","endLine":2,"endColumn":26},{"ruleId":"371","severity":1,"message":"377","line":2,"column":10,"nodeType":"373","messageId":"374","endLine":2,"endColumn":26},{"ruleId":"375","severity":1,"message":"377","line":2,"column":10,"nodeType":"373","messageId":"374","endLine":2,"endColumn":26},{"ruleId":"371","severity":1,"message":"377","line":2,"column":10,"nodeType":"373","messageId":"374","endLine":2,"endColumn":26},{"ruleId":"375","severity":1,"message":"377","line":2,"column":10,"nodeType":"373","messageId":"374","endLine":2,"endColumn":26},{"ruleId":"383","severity":1,"message":"384","line":110,"column":7,"nodeType":"385","messageId":"386","endLine":110,"endColumn":20},{"ruleId":"383","severity":1,"message":"384","line":75,"column":9,"nodeType":"385","messageId":"386","endLine":75,"endColumn":20},{"ruleId":"383","severity":1,"message":"384","line":99,"column":9,"nodeType":"385","messageId":"386","endLine":99,"endColumn":20},{"ruleId":"383","severity":1,"message":"384","line":153,"column":9,"nodeType":"385","messageId":"386","endLine":153,"endColumn":20},{"ruleId":"371","severity":1,"message":"429","line":171,"column":11,"nodeType":"373","messageId":"374","endLine":171,"endColumn":13},{"ruleId":"375","severity":1,"message":"429","line":171,"column":11,"nodeType":"373","messageId":"374","endLine":171,"endColumn":13},{"ruleId":"383","severity":1,"message":"384","line":223,"column":5,"nodeType":"385","messageId":"386","endLine":223,"endColumn":16},{"ruleId":"383","severity":1,"message":"384","line":262,"column":5,"nodeType":"385","messageId":"386","endLine":262,"endColumn":16},{"ruleId":"383","severity":1,"message":"384","line":295,"column":3,"nodeType":"385","messageId":"386","endLine":295,"endColumn":14},{"ruleId":"383","severity":1,"message":"384","line":296,"column":3,"nodeType":"385","messageId":"386","endLine":296,"endColumn":14},{"ruleId":"383","severity":1,"message":"384","line":297,"column":3,"nodeType":"385","messageId":"386","endLine":297,"endColumn":14},{"ruleId":"383","severity":1,"message":"384","line":299,"column":5,"nodeType":"385","messageId":"386","endLine":299,"endColumn":16},{"ruleId":"383","severity":1,"message":"384","line":301,"column":36,"nodeType":"385","messageId":"386","endLine":301,"endColumn":47},{"ruleId":"383","severity":1,"message":"384","line":304,"column":3,"nodeType":"385","messageId":"386","endLine":304,"endColumn":14},{"ruleId":"383","severity":1,"message":"384","line":324,"column":7,"nodeType":"385","messageId":"386","endLine":324,"endColumn":18},{"ruleId":"383","severity":1,"message":"384","line":347,"column":9,"nodeType":"385","messageId":"386","endLine":347,"endColumn":20},{"ruleId":"383","severity":1,"message":"384","line":355,"column":3,"nodeType":"385","messageId":"386","endLine":355,"endColumn":14},{"ruleId":"371","severity":1,"message":"430","line":4,"column":57,"nodeType":"373","messageId":"374","endLine":4,"endColumn":75},{"ruleId":"375","severity":1,"message":"430","line":4,"column":57,"nodeType":"373","messageId":"374","endLine":4,"endColumn":75},{"ruleId":"431","severity":1,"message":"432","line":12,"column":1,"nodeType":"433","endLine":163,"endColumn":3},{"ruleId":"434","severity":1,"message":"435","line":21,"column":18,"nodeType":"436","messageId":"386","endLine":21,"endColumn":20},{"ruleId":"383","severity":1,"message":"384","line":24,"column":7,"nodeType":"385","messageId":"386","endLine":24,"endColumn":18},{"ruleId":"383","severity":1,"message":"384","line":35,"column":5,"nodeType":"385","messageId":"386","endLine":35,"endColumn":16},{"ruleId":"383","severity":1,"message":"384","line":31,"column":18,"nodeType":"385","messageId":"386","endLine":31,"endColumn":31},{"ruleId":"383","severity":1,"message":"384","line":40,"column":20,"nodeType":"385","messageId":"386","endLine":40,"endColumn":33},{"ruleId":"371","severity":1,"message":"437","line":4,"column":3,"nodeType":"373","messageId":"374","endLine":4,"endColumn":18},{"ruleId":"371","severity":1,"message":"438","line":5,"column":3,"nodeType":"373","messageId":"374","endLine":5,"endColumn":14},{"ruleId":"383","severity":1,"message":"384","line":4,"column":1,"nodeType":"385","messageId":"386","endLine":4,"endColumn":12},{"ruleId":"431","severity":1,"message":"439","line":5,"column":1,"nodeType":"433","endLine":28,"endColumn":3},{"ruleId":"383","severity":1,"message":"384","line":10,"column":9,"nodeType":"385","messageId":"386","endLine":10,"endColumn":20},{"ruleId":"383","severity":1,"message":"384","line":25,"column":9,"nodeType":"385","messageId":"386","endLine":25,"endColumn":20},{"ruleId":"371","severity":1,"message":"400","line":3,"column":8,"nodeType":"373","messageId":"374","endLine":3,"endColumn":17},{"ruleId":"375","severity":1,"message":"400","line":3,"column":8,"nodeType":"373","messageId":"374","endLine":3,"endColumn":17},{"ruleId":"371","severity":1,"message":"377","line":4,"column":44,"nodeType":"373","messageId":"374","endLine":4,"endColumn":60},{"ruleId":"375","severity":1,"message":"377","line":4,"column":44,"nodeType":"373","messageId":"374","endLine":4,"endColumn":60},{"ruleId":"383","severity":1,"message":"384","line":66,"column":7,"nodeType":"385","messageId":"386","endLine":66,"endColumn":18},{"ruleId":"388","severity":1,"message":"389","line":106,"column":91,"nodeType":"390","messageId":"391","endLine":106,"endColumn":131},"no-native-reassign",["440"],"no-negated-in-lhs",["441"],"lines-around-directive",["442"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"react-hooks/exhaustive-deps","Assignments to the 'isDragStart' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal",["440"],["441"],"jsx-a11y/accessible-emoji",[],["442"],[],[],[],[],"React Hook useEffect has a missing dependency: 'focusManager'. Either include it or remove the dependency array.","ArrayExpression",["443"],["440"],["441"],[],["442"],[],[],[],[],["444"],"no-unused-vars","'BlockComponentTypes' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'FontColor' is defined but never used.","'InlineStyleTypes' is defined but never used.","'BlockStyleTypes' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-console","Unexpected console statement.","MemberExpression","unexpected","'FocusManager' is defined but never used.","react/no-danger","Dangerous property 'dangerouslySetInnerHTML' found","JSXAttribute","dangerousProp","'refresh' is defined but never used.","'recordAnchor' is defined but never used.","'parseAnchor' is defined but never used.","'showMarkdown' is defined but never used.","'selectState' is defined but never used.","'findEnterAnchor' is defined but never used.","'deleteEmpty' is defined but never used.","'insertSibling' is defined but never used.","'PlainText' is defined but never used.","'dataListToComponents' is defined but never used.","'childList' is assigned a value but never used.",["440"],["441"],[],["442"],[],[],[],[],"no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","'strong' is defined but never used.","'em' is defined but never used.","'highlight' is defined but never used.","'inlineCode' is defined but never used.","'del' is defined but never used.","'plainText' is defined but never used.","'wbr' is defined but never used.","'header' is defined but never used.","'paragragh' is defined but never used.","'quote' is defined but never used.","'list' is defined but never used.","'li' is defined but never used.","'indentation' is defined but never used.","'table' is defined but never used.","'em' is assigned a value but never used.","'ConsoleSqlOutlined' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'loginSuccessful' is defined but never used.","'loginFailed' is defined but never used.","Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation","padding-line-between-statements",{"desc":"445","fix":"446"},{"desc":"445","fix":"447"},"Update the dependencies array to be: [focusManager]",{"range":"448","text":"449"},{"range":"450","text":"449"},[1002,1004],"[focusManager]",[426,428]]